// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PERSISTEDCOMPOUNDWRITE_FIREBASE_DATABASE_INTERNAL_PERSISTENCE_H_
#define FLATBUFFERS_GENERATED_PERSISTEDCOMPOUNDWRITE_FIREBASE_DATABASE_INTERNAL_PERSISTENCE_H_

#include "flatbuffers/flatbuffers.h"
#include "flatbuffers/flexbuffers.h"

namespace firebase {
namespace database {
namespace internal {
namespace persistence {

struct TreeKeyValuePair;
struct TreeKeyValuePairBuilder;
struct TreeKeyValuePairT;

struct VariantTreeNode;
struct VariantTreeNodeBuilder;
struct VariantTreeNodeT;

struct PersistedCompoundWrite;
struct PersistedCompoundWriteBuilder;
struct PersistedCompoundWriteT;

struct TreeKeyValuePairT : public flatbuffers::NativeTable {
  typedef TreeKeyValuePair TableType;
  std::string key;
  flatbuffers::unique_ptr<firebase::database::internal::persistence::VariantTreeNodeT> subtree;
  TreeKeyValuePairT() {
  }
};

struct TreeKeyValuePair FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TreeKeyValuePairT NativeTableType;
  typedef TreeKeyValuePairBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_KEY = 4,
    VT_SUBTREE = 6
  };
  const flatbuffers::String *key() const {
    return GetPointer<const flatbuffers::String *>(VT_KEY);
  }
  const firebase::database::internal::persistence::VariantTreeNode *subtree() const {
    return GetPointer<const firebase::database::internal::persistence::VariantTreeNode *>(VT_SUBTREE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_KEY) &&
           verifier.VerifyString(key()) &&
           VerifyOffset(verifier, VT_SUBTREE) &&
           verifier.VerifyTable(subtree()) &&
           verifier.EndTable();
  }
  TreeKeyValuePairT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(TreeKeyValuePairT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<TreeKeyValuePair> Pack(flatbuffers::FlatBufferBuilder &_fbb, const TreeKeyValuePairT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct TreeKeyValuePairBuilder {
  typedef TreeKeyValuePair Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_key(flatbuffers::Offset<flatbuffers::String> key) {
    fbb_.AddOffset(TreeKeyValuePair::VT_KEY, key);
  }
  void add_subtree(flatbuffers::Offset<firebase::database::internal::persistence::VariantTreeNode> subtree) {
    fbb_.AddOffset(TreeKeyValuePair::VT_SUBTREE, subtree);
  }
  explicit TreeKeyValuePairBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<TreeKeyValuePair> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TreeKeyValuePair>(end);
    return o;
  }
};

inline flatbuffers::Offset<TreeKeyValuePair> CreateTreeKeyValuePair(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> key = 0,
    flatbuffers::Offset<firebase::database::internal::persistence::VariantTreeNode> subtree = 0) {
  TreeKeyValuePairBuilder builder_(_fbb);
  builder_.add_subtree(subtree);
  builder_.add_key(key);
  return builder_.Finish();
}

inline flatbuffers::Offset<TreeKeyValuePair> CreateTreeKeyValuePairDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *key = nullptr,
    flatbuffers::Offset<firebase::database::internal::persistence::VariantTreeNode> subtree = 0) {
  auto key__ = key ? _fbb.CreateString(key) : 0;
  return firebase::database::internal::persistence::CreateTreeKeyValuePair(
      _fbb,
      key__,
      subtree);
}

flatbuffers::Offset<TreeKeyValuePair> CreateTreeKeyValuePair(flatbuffers::FlatBufferBuilder &_fbb, const TreeKeyValuePairT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct VariantTreeNodeT : public flatbuffers::NativeTable {
  typedef VariantTreeNode TableType;
  std::vector<uint8_t> value;
  std::vector<flatbuffers::unique_ptr<firebase::database::internal::persistence::TreeKeyValuePairT>> children;
  VariantTreeNodeT() {
  }
};

struct VariantTreeNode FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef VariantTreeNodeT NativeTableType;
  typedef VariantTreeNodeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4,
    VT_CHILDREN = 6
  };
  const flatbuffers::Vector<uint8_t> *value() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_VALUE);
  }
  flexbuffers::Reference value_flexbuffer_root() const {
    return flexbuffers::GetRoot(value()->Data(), value()->size());
  }
  const flatbuffers::Vector<flatbuffers::Offset<firebase::database::internal::persistence::TreeKeyValuePair>> *children() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<firebase::database::internal::persistence::TreeKeyValuePair>> *>(VT_CHILDREN);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyVector(value()) &&
           VerifyOffset(verifier, VT_CHILDREN) &&
           verifier.VerifyVector(children()) &&
           verifier.VerifyVectorOfTables(children()) &&
           verifier.EndTable();
  }
  VariantTreeNodeT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(VariantTreeNodeT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<VariantTreeNode> Pack(flatbuffers::FlatBufferBuilder &_fbb, const VariantTreeNodeT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct VariantTreeNodeBuilder {
  typedef VariantTreeNode Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> value) {
    fbb_.AddOffset(VariantTreeNode::VT_VALUE, value);
  }
  void add_children(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<firebase::database::internal::persistence::TreeKeyValuePair>>> children) {
    fbb_.AddOffset(VariantTreeNode::VT_CHILDREN, children);
  }
  explicit VariantTreeNodeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<VariantTreeNode> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<VariantTreeNode>(end);
    return o;
  }
};

inline flatbuffers::Offset<VariantTreeNode> CreateVariantTreeNode(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> value = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<firebase::database::internal::persistence::TreeKeyValuePair>>> children = 0) {
  VariantTreeNodeBuilder builder_(_fbb);
  builder_.add_children(children);
  builder_.add_value(value);
  return builder_.Finish();
}

inline flatbuffers::Offset<VariantTreeNode> CreateVariantTreeNodeDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *value = nullptr,
    const std::vector<flatbuffers::Offset<firebase::database::internal::persistence::TreeKeyValuePair>> *children = nullptr) {
  auto value__ = value ? _fbb.CreateVector<uint8_t>(*value) : 0;
  auto children__ = children ? _fbb.CreateVector<flatbuffers::Offset<firebase::database::internal::persistence::TreeKeyValuePair>>(*children) : 0;
  return firebase::database::internal::persistence::CreateVariantTreeNode(
      _fbb,
      value__,
      children__);
}

flatbuffers::Offset<VariantTreeNode> CreateVariantTreeNode(flatbuffers::FlatBufferBuilder &_fbb, const VariantTreeNodeT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct PersistedCompoundWriteT : public flatbuffers::NativeTable {
  typedef PersistedCompoundWrite TableType;
  flatbuffers::unique_ptr<firebase::database::internal::persistence::VariantTreeNodeT> write_tree;
  PersistedCompoundWriteT() {
  }
};

struct PersistedCompoundWrite FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PersistedCompoundWriteT NativeTableType;
  typedef PersistedCompoundWriteBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_WRITE_TREE = 4
  };
  const firebase::database::internal::persistence::VariantTreeNode *write_tree() const {
    return GetPointer<const firebase::database::internal::persistence::VariantTreeNode *>(VT_WRITE_TREE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_WRITE_TREE) &&
           verifier.VerifyTable(write_tree()) &&
           verifier.EndTable();
  }
  PersistedCompoundWriteT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(PersistedCompoundWriteT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<PersistedCompoundWrite> Pack(flatbuffers::FlatBufferBuilder &_fbb, const PersistedCompoundWriteT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct PersistedCompoundWriteBuilder {
  typedef PersistedCompoundWrite Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_write_tree(flatbuffers::Offset<firebase::database::internal::persistence::VariantTreeNode> write_tree) {
    fbb_.AddOffset(PersistedCompoundWrite::VT_WRITE_TREE, write_tree);
  }
  explicit PersistedCompoundWriteBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<PersistedCompoundWrite> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PersistedCompoundWrite>(end);
    return o;
  }
};

inline flatbuffers::Offset<PersistedCompoundWrite> CreatePersistedCompoundWrite(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<firebase::database::internal::persistence::VariantTreeNode> write_tree = 0) {
  PersistedCompoundWriteBuilder builder_(_fbb);
  builder_.add_write_tree(write_tree);
  return builder_.Finish();
}

flatbuffers::Offset<PersistedCompoundWrite> CreatePersistedCompoundWrite(flatbuffers::FlatBufferBuilder &_fbb, const PersistedCompoundWriteT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline TreeKeyValuePairT *TreeKeyValuePair::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  flatbuffers::unique_ptr<firebase::database::internal::persistence::TreeKeyValuePairT> _o = flatbuffers::unique_ptr<firebase::database::internal::persistence::TreeKeyValuePairT>(new TreeKeyValuePairT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void TreeKeyValuePair::UnPackTo(TreeKeyValuePairT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = key(); if (_e) _o->key = _e->str(); }
  { auto _e = subtree(); if (_e) _o->subtree = flatbuffers::unique_ptr<firebase::database::internal::persistence::VariantTreeNodeT>(_e->UnPack(_resolver)); }
}

inline flatbuffers::Offset<TreeKeyValuePair> TreeKeyValuePair::Pack(flatbuffers::FlatBufferBuilder &_fbb, const TreeKeyValuePairT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateTreeKeyValuePair(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<TreeKeyValuePair> CreateTreeKeyValuePair(flatbuffers::FlatBufferBuilder &_fbb, const TreeKeyValuePairT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const TreeKeyValuePairT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _key = _o->key.empty() ? 0 : _fbb.CreateString(_o->key);
  auto _subtree = _o->subtree ? CreateVariantTreeNode(_fbb, _o->subtree.get(), _rehasher) : 0;
  return firebase::database::internal::persistence::CreateTreeKeyValuePair(
      _fbb,
      _key,
      _subtree);
}

inline VariantTreeNodeT *VariantTreeNode::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  flatbuffers::unique_ptr<firebase::database::internal::persistence::VariantTreeNodeT> _o = flatbuffers::unique_ptr<firebase::database::internal::persistence::VariantTreeNodeT>(new VariantTreeNodeT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void VariantTreeNode::UnPackTo(VariantTreeNodeT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = value(); if (_e) { _o->value.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->value[_i] = _e->Get(_i); } } }
  { auto _e = children(); if (_e) { _o->children.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->children[_i] = flatbuffers::unique_ptr<firebase::database::internal::persistence::TreeKeyValuePairT>(_e->Get(_i)->UnPack(_resolver)); } } }
}

inline flatbuffers::Offset<VariantTreeNode> VariantTreeNode::Pack(flatbuffers::FlatBufferBuilder &_fbb, const VariantTreeNodeT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateVariantTreeNode(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<VariantTreeNode> CreateVariantTreeNode(flatbuffers::FlatBufferBuilder &_fbb, const VariantTreeNodeT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const VariantTreeNodeT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _value = _o->value.size() ? _fbb.CreateVector(_o->value) : 0;
  auto _children = _o->children.size() ? _fbb.CreateVector<flatbuffers::Offset<firebase::database::internal::persistence::TreeKeyValuePair>> (_o->children.size(), [](size_t i, _VectorArgs *__va) { return CreateTreeKeyValuePair(*__va->__fbb, __va->__o->children[i].get(), __va->__rehasher); }, &_va ) : 0;
  return firebase::database::internal::persistence::CreateVariantTreeNode(
      _fbb,
      _value,
      _children);
}

inline PersistedCompoundWriteT *PersistedCompoundWrite::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  flatbuffers::unique_ptr<firebase::database::internal::persistence::PersistedCompoundWriteT> _o = flatbuffers::unique_ptr<firebase::database::internal::persistence::PersistedCompoundWriteT>(new PersistedCompoundWriteT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void PersistedCompoundWrite::UnPackTo(PersistedCompoundWriteT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = write_tree(); if (_e) _o->write_tree = flatbuffers::unique_ptr<firebase::database::internal::persistence::VariantTreeNodeT>(_e->UnPack(_resolver)); }
}

inline flatbuffers::Offset<PersistedCompoundWrite> PersistedCompoundWrite::Pack(flatbuffers::FlatBufferBuilder &_fbb, const PersistedCompoundWriteT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreatePersistedCompoundWrite(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<PersistedCompoundWrite> CreatePersistedCompoundWrite(flatbuffers::FlatBufferBuilder &_fbb, const PersistedCompoundWriteT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const PersistedCompoundWriteT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _write_tree = _o->write_tree ? CreateVariantTreeNode(_fbb, _o->write_tree.get(), _rehasher) : 0;
  return firebase::database::internal::persistence::CreatePersistedCompoundWrite(
      _fbb,
      _write_tree);
}

inline const firebase::database::internal::persistence::PersistedCompoundWrite *GetPersistedCompoundWrite(const void *buf) {
  return flatbuffers::GetRoot<firebase::database::internal::persistence::PersistedCompoundWrite>(buf);
}

inline const firebase::database::internal::persistence::PersistedCompoundWrite *GetSizePrefixedPersistedCompoundWrite(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<firebase::database::internal::persistence::PersistedCompoundWrite>(buf);
}

inline bool VerifyPersistedCompoundWriteBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<firebase::database::internal::persistence::PersistedCompoundWrite>(nullptr);
}

inline bool VerifySizePrefixedPersistedCompoundWriteBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<firebase::database::internal::persistence::PersistedCompoundWrite>(nullptr);
}

inline void FinishPersistedCompoundWriteBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<firebase::database::internal::persistence::PersistedCompoundWrite> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPersistedCompoundWriteBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<firebase::database::internal::persistence::PersistedCompoundWrite> root) {
  fbb.FinishSizePrefixed(root);
}

inline flatbuffers::unique_ptr<firebase::database::internal::persistence::PersistedCompoundWriteT> UnPackPersistedCompoundWrite(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return flatbuffers::unique_ptr<firebase::database::internal::persistence::PersistedCompoundWriteT>(GetPersistedCompoundWrite(buf)->UnPack(res));
}

inline flatbuffers::unique_ptr<firebase::database::internal::persistence::PersistedCompoundWriteT> UnPackSizePrefixedPersistedCompoundWrite(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return flatbuffers::unique_ptr<firebase::database::internal::persistence::PersistedCompoundWriteT>(GetSizePrefixedPersistedCompoundWrite(buf)->UnPack(res));
}

}  // namespace persistence
}  // namespace internal
}  // namespace database
}  // namespace firebase

#endif  // FLATBUFFERS_GENERATED_PERSISTEDCOMPOUNDWRITE_FIREBASE_DATABASE_INTERNAL_PERSISTENCE_H_
