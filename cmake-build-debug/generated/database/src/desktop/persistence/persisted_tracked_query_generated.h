// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PERSISTEDTRACKEDQUERY_FIREBASE_DATABASE_INTERNAL_PERSISTENCE_H_
#define FLATBUFFERS_GENERATED_PERSISTEDTRACKEDQUERY_FIREBASE_DATABASE_INTERNAL_PERSISTENCE_H_

#include "flatbuffers/flatbuffers.h"
#include "flatbuffers/flexbuffers.h"

#include "persisted_query_params_generated.h"
#include "persisted_query_spec_generated.h"

namespace firebase {
namespace database {
namespace internal {
namespace persistence {

struct PersistedTrackedQuery;
struct PersistedTrackedQueryBuilder;
struct PersistedTrackedQueryT;

struct PersistedTrackedQueryT : public flatbuffers::NativeTable {
  typedef PersistedTrackedQuery TableType;
  uint64_t query_id;
  flatbuffers::unique_ptr<firebase::database::internal::persistence::PersistedQuerySpecT> query_spec;
  uint64_t last_use;
  bool complete;
  bool active;
  PersistedTrackedQueryT()
      : query_id(0),
        last_use(0),
        complete(false),
        active(false) {
  }
};

struct PersistedTrackedQuery FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PersistedTrackedQueryT NativeTableType;
  typedef PersistedTrackedQueryBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_QUERY_ID = 4,
    VT_QUERY_SPEC = 6,
    VT_LAST_USE = 8,
    VT_COMPLETE = 10,
    VT_ACTIVE = 12
  };
  uint64_t query_id() const {
    return GetField<uint64_t>(VT_QUERY_ID, 0);
  }
  const firebase::database::internal::persistence::PersistedQuerySpec *query_spec() const {
    return GetPointer<const firebase::database::internal::persistence::PersistedQuerySpec *>(VT_QUERY_SPEC);
  }
  uint64_t last_use() const {
    return GetField<uint64_t>(VT_LAST_USE, 0);
  }
  bool complete() const {
    return GetField<uint8_t>(VT_COMPLETE, 0) != 0;
  }
  bool active() const {
    return GetField<uint8_t>(VT_ACTIVE, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_QUERY_ID) &&
           VerifyOffset(verifier, VT_QUERY_SPEC) &&
           verifier.VerifyTable(query_spec()) &&
           VerifyField<uint64_t>(verifier, VT_LAST_USE) &&
           VerifyField<uint8_t>(verifier, VT_COMPLETE) &&
           VerifyField<uint8_t>(verifier, VT_ACTIVE) &&
           verifier.EndTable();
  }
  PersistedTrackedQueryT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(PersistedTrackedQueryT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<PersistedTrackedQuery> Pack(flatbuffers::FlatBufferBuilder &_fbb, const PersistedTrackedQueryT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct PersistedTrackedQueryBuilder {
  typedef PersistedTrackedQuery Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_query_id(uint64_t query_id) {
    fbb_.AddElement<uint64_t>(PersistedTrackedQuery::VT_QUERY_ID, query_id, 0);
  }
  void add_query_spec(flatbuffers::Offset<firebase::database::internal::persistence::PersistedQuerySpec> query_spec) {
    fbb_.AddOffset(PersistedTrackedQuery::VT_QUERY_SPEC, query_spec);
  }
  void add_last_use(uint64_t last_use) {
    fbb_.AddElement<uint64_t>(PersistedTrackedQuery::VT_LAST_USE, last_use, 0);
  }
  void add_complete(bool complete) {
    fbb_.AddElement<uint8_t>(PersistedTrackedQuery::VT_COMPLETE, static_cast<uint8_t>(complete), 0);
  }
  void add_active(bool active) {
    fbb_.AddElement<uint8_t>(PersistedTrackedQuery::VT_ACTIVE, static_cast<uint8_t>(active), 0);
  }
  explicit PersistedTrackedQueryBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<PersistedTrackedQuery> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PersistedTrackedQuery>(end);
    return o;
  }
};

inline flatbuffers::Offset<PersistedTrackedQuery> CreatePersistedTrackedQuery(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t query_id = 0,
    flatbuffers::Offset<firebase::database::internal::persistence::PersistedQuerySpec> query_spec = 0,
    uint64_t last_use = 0,
    bool complete = false,
    bool active = false) {
  PersistedTrackedQueryBuilder builder_(_fbb);
  builder_.add_last_use(last_use);
  builder_.add_query_id(query_id);
  builder_.add_query_spec(query_spec);
  builder_.add_active(active);
  builder_.add_complete(complete);
  return builder_.Finish();
}

flatbuffers::Offset<PersistedTrackedQuery> CreatePersistedTrackedQuery(flatbuffers::FlatBufferBuilder &_fbb, const PersistedTrackedQueryT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline PersistedTrackedQueryT *PersistedTrackedQuery::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  flatbuffers::unique_ptr<firebase::database::internal::persistence::PersistedTrackedQueryT> _o = flatbuffers::unique_ptr<firebase::database::internal::persistence::PersistedTrackedQueryT>(new PersistedTrackedQueryT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void PersistedTrackedQuery::UnPackTo(PersistedTrackedQueryT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = query_id(); _o->query_id = _e; }
  { auto _e = query_spec(); if (_e) _o->query_spec = flatbuffers::unique_ptr<firebase::database::internal::persistence::PersistedQuerySpecT>(_e->UnPack(_resolver)); }
  { auto _e = last_use(); _o->last_use = _e; }
  { auto _e = complete(); _o->complete = _e; }
  { auto _e = active(); _o->active = _e; }
}

inline flatbuffers::Offset<PersistedTrackedQuery> PersistedTrackedQuery::Pack(flatbuffers::FlatBufferBuilder &_fbb, const PersistedTrackedQueryT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreatePersistedTrackedQuery(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<PersistedTrackedQuery> CreatePersistedTrackedQuery(flatbuffers::FlatBufferBuilder &_fbb, const PersistedTrackedQueryT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const PersistedTrackedQueryT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _query_id = _o->query_id;
  auto _query_spec = _o->query_spec ? CreatePersistedQuerySpec(_fbb, _o->query_spec.get(), _rehasher) : 0;
  auto _last_use = _o->last_use;
  auto _complete = _o->complete;
  auto _active = _o->active;
  return firebase::database::internal::persistence::CreatePersistedTrackedQuery(
      _fbb,
      _query_id,
      _query_spec,
      _last_use,
      _complete,
      _active);
}

inline const firebase::database::internal::persistence::PersistedTrackedQuery *GetPersistedTrackedQuery(const void *buf) {
  return flatbuffers::GetRoot<firebase::database::internal::persistence::PersistedTrackedQuery>(buf);
}

inline const firebase::database::internal::persistence::PersistedTrackedQuery *GetSizePrefixedPersistedTrackedQuery(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<firebase::database::internal::persistence::PersistedTrackedQuery>(buf);
}

inline const char *PersistedTrackedQueryIdentifier() {
  return "TQRY";
}

inline bool PersistedTrackedQueryBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, PersistedTrackedQueryIdentifier());
}

inline bool VerifyPersistedTrackedQueryBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<firebase::database::internal::persistence::PersistedTrackedQuery>(PersistedTrackedQueryIdentifier());
}

inline bool VerifySizePrefixedPersistedTrackedQueryBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<firebase::database::internal::persistence::PersistedTrackedQuery>(PersistedTrackedQueryIdentifier());
}

inline const char *PersistedTrackedQueryExtension() {
  return "rtdb";
}

inline void FinishPersistedTrackedQueryBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<firebase::database::internal::persistence::PersistedTrackedQuery> root) {
  fbb.Finish(root, PersistedTrackedQueryIdentifier());
}

inline void FinishSizePrefixedPersistedTrackedQueryBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<firebase::database::internal::persistence::PersistedTrackedQuery> root) {
  fbb.FinishSizePrefixed(root, PersistedTrackedQueryIdentifier());
}

inline flatbuffers::unique_ptr<firebase::database::internal::persistence::PersistedTrackedQueryT> UnPackPersistedTrackedQuery(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return flatbuffers::unique_ptr<firebase::database::internal::persistence::PersistedTrackedQueryT>(GetPersistedTrackedQuery(buf)->UnPack(res));
}

inline flatbuffers::unique_ptr<firebase::database::internal::persistence::PersistedTrackedQueryT> UnPackSizePrefixedPersistedTrackedQuery(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return flatbuffers::unique_ptr<firebase::database::internal::persistence::PersistedTrackedQueryT>(GetSizePrefixedPersistedTrackedQuery(buf)->UnPack(res));
}

}  // namespace persistence
}  // namespace internal
}  // namespace database
}  // namespace firebase

#endif  // FLATBUFFERS_GENERATED_PERSISTEDTRACKEDQUERY_FIREBASE_DATABASE_INTERNAL_PERSISTENCE_H_
