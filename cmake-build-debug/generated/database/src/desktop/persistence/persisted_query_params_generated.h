// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PERSISTEDQUERYPARAMS_FIREBASE_DATABASE_INTERNAL_PERSISTENCE_H_
#define FLATBUFFERS_GENERATED_PERSISTEDQUERYPARAMS_FIREBASE_DATABASE_INTERNAL_PERSISTENCE_H_

#include "flatbuffers/flatbuffers.h"
#include "flatbuffers/flexbuffers.h"

namespace firebase {
namespace database {
namespace internal {
namespace persistence {

struct PersistedQueryParams;
struct PersistedQueryParamsBuilder;
struct PersistedQueryParamsT;

enum OrderBy {
  OrderBy_Priority = 0,
  OrderBy_Child = 1,
  OrderBy_Key = 2,
  OrderBy_Value = 3,
  OrderBy_MIN = OrderBy_Priority,
  OrderBy_MAX = OrderBy_Value
};

inline const OrderBy (&EnumValuesOrderBy())[4] {
  static const OrderBy values[] = {
    OrderBy_Priority,
    OrderBy_Child,
    OrderBy_Key,
    OrderBy_Value
  };
  return values;
}

inline const char * const *EnumNamesOrderBy() {
  static const char * const names[5] = {
    "Priority",
    "Child",
    "Key",
    "Value",
    nullptr
  };
  return names;
}

inline const char *EnumNameOrderBy(OrderBy e) {
  if (flatbuffers::IsOutRange(e, OrderBy_Priority, OrderBy_Value)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesOrderBy()[index];
}

struct PersistedQueryParamsT : public flatbuffers::NativeTable {
  typedef PersistedQueryParams TableType;
  firebase::database::internal::persistence::OrderBy order_by;
  std::string order_by_child;
  std::vector<uint8_t> start_at_value;
  std::string start_at_child_key;
  std::vector<uint8_t> end_at_value;
  std::string end_at_child_key;
  std::vector<uint8_t> equal_to_value;
  std::string equal_to_child_key;
  uint32_t limit_first;
  uint32_t limit_last;
  PersistedQueryParamsT()
      : order_by(firebase::database::internal::persistence::OrderBy_Priority),
        limit_first(0),
        limit_last(0) {
  }
};

struct PersistedQueryParams FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PersistedQueryParamsT NativeTableType;
  typedef PersistedQueryParamsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ORDER_BY = 4,
    VT_ORDER_BY_CHILD = 6,
    VT_START_AT_VALUE = 8,
    VT_START_AT_CHILD_KEY = 10,
    VT_END_AT_VALUE = 12,
    VT_END_AT_CHILD_KEY = 14,
    VT_EQUAL_TO_VALUE = 16,
    VT_EQUAL_TO_CHILD_KEY = 18,
    VT_LIMIT_FIRST = 20,
    VT_LIMIT_LAST = 22
  };
  firebase::database::internal::persistence::OrderBy order_by() const {
    return static_cast<firebase::database::internal::persistence::OrderBy>(GetField<uint8_t>(VT_ORDER_BY, 0));
  }
  const flatbuffers::String *order_by_child() const {
    return GetPointer<const flatbuffers::String *>(VT_ORDER_BY_CHILD);
  }
  const flatbuffers::Vector<uint8_t> *start_at_value() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_START_AT_VALUE);
  }
  flexbuffers::Reference start_at_value_flexbuffer_root() const {
    return flexbuffers::GetRoot(start_at_value()->Data(), start_at_value()->size());
  }
  const flatbuffers::String *start_at_child_key() const {
    return GetPointer<const flatbuffers::String *>(VT_START_AT_CHILD_KEY);
  }
  const flatbuffers::Vector<uint8_t> *end_at_value() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_END_AT_VALUE);
  }
  flexbuffers::Reference end_at_value_flexbuffer_root() const {
    return flexbuffers::GetRoot(end_at_value()->Data(), end_at_value()->size());
  }
  const flatbuffers::String *end_at_child_key() const {
    return GetPointer<const flatbuffers::String *>(VT_END_AT_CHILD_KEY);
  }
  const flatbuffers::Vector<uint8_t> *equal_to_value() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_EQUAL_TO_VALUE);
  }
  flexbuffers::Reference equal_to_value_flexbuffer_root() const {
    return flexbuffers::GetRoot(equal_to_value()->Data(), equal_to_value()->size());
  }
  const flatbuffers::String *equal_to_child_key() const {
    return GetPointer<const flatbuffers::String *>(VT_EQUAL_TO_CHILD_KEY);
  }
  uint32_t limit_first() const {
    return GetField<uint32_t>(VT_LIMIT_FIRST, 0);
  }
  uint32_t limit_last() const {
    return GetField<uint32_t>(VT_LIMIT_LAST, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_ORDER_BY) &&
           VerifyOffset(verifier, VT_ORDER_BY_CHILD) &&
           verifier.VerifyString(order_by_child()) &&
           VerifyOffset(verifier, VT_START_AT_VALUE) &&
           verifier.VerifyVector(start_at_value()) &&
           VerifyOffset(verifier, VT_START_AT_CHILD_KEY) &&
           verifier.VerifyString(start_at_child_key()) &&
           VerifyOffset(verifier, VT_END_AT_VALUE) &&
           verifier.VerifyVector(end_at_value()) &&
           VerifyOffset(verifier, VT_END_AT_CHILD_KEY) &&
           verifier.VerifyString(end_at_child_key()) &&
           VerifyOffset(verifier, VT_EQUAL_TO_VALUE) &&
           verifier.VerifyVector(equal_to_value()) &&
           VerifyOffset(verifier, VT_EQUAL_TO_CHILD_KEY) &&
           verifier.VerifyString(equal_to_child_key()) &&
           VerifyField<uint32_t>(verifier, VT_LIMIT_FIRST) &&
           VerifyField<uint32_t>(verifier, VT_LIMIT_LAST) &&
           verifier.EndTable();
  }
  PersistedQueryParamsT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(PersistedQueryParamsT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<PersistedQueryParams> Pack(flatbuffers::FlatBufferBuilder &_fbb, const PersistedQueryParamsT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct PersistedQueryParamsBuilder {
  typedef PersistedQueryParams Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_order_by(firebase::database::internal::persistence::OrderBy order_by) {
    fbb_.AddElement<uint8_t>(PersistedQueryParams::VT_ORDER_BY, static_cast<uint8_t>(order_by), 0);
  }
  void add_order_by_child(flatbuffers::Offset<flatbuffers::String> order_by_child) {
    fbb_.AddOffset(PersistedQueryParams::VT_ORDER_BY_CHILD, order_by_child);
  }
  void add_start_at_value(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> start_at_value) {
    fbb_.AddOffset(PersistedQueryParams::VT_START_AT_VALUE, start_at_value);
  }
  void add_start_at_child_key(flatbuffers::Offset<flatbuffers::String> start_at_child_key) {
    fbb_.AddOffset(PersistedQueryParams::VT_START_AT_CHILD_KEY, start_at_child_key);
  }
  void add_end_at_value(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> end_at_value) {
    fbb_.AddOffset(PersistedQueryParams::VT_END_AT_VALUE, end_at_value);
  }
  void add_end_at_child_key(flatbuffers::Offset<flatbuffers::String> end_at_child_key) {
    fbb_.AddOffset(PersistedQueryParams::VT_END_AT_CHILD_KEY, end_at_child_key);
  }
  void add_equal_to_value(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> equal_to_value) {
    fbb_.AddOffset(PersistedQueryParams::VT_EQUAL_TO_VALUE, equal_to_value);
  }
  void add_equal_to_child_key(flatbuffers::Offset<flatbuffers::String> equal_to_child_key) {
    fbb_.AddOffset(PersistedQueryParams::VT_EQUAL_TO_CHILD_KEY, equal_to_child_key);
  }
  void add_limit_first(uint32_t limit_first) {
    fbb_.AddElement<uint32_t>(PersistedQueryParams::VT_LIMIT_FIRST, limit_first, 0);
  }
  void add_limit_last(uint32_t limit_last) {
    fbb_.AddElement<uint32_t>(PersistedQueryParams::VT_LIMIT_LAST, limit_last, 0);
  }
  explicit PersistedQueryParamsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<PersistedQueryParams> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PersistedQueryParams>(end);
    return o;
  }
};

inline flatbuffers::Offset<PersistedQueryParams> CreatePersistedQueryParams(
    flatbuffers::FlatBufferBuilder &_fbb,
    firebase::database::internal::persistence::OrderBy order_by = firebase::database::internal::persistence::OrderBy_Priority,
    flatbuffers::Offset<flatbuffers::String> order_by_child = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> start_at_value = 0,
    flatbuffers::Offset<flatbuffers::String> start_at_child_key = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> end_at_value = 0,
    flatbuffers::Offset<flatbuffers::String> end_at_child_key = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> equal_to_value = 0,
    flatbuffers::Offset<flatbuffers::String> equal_to_child_key = 0,
    uint32_t limit_first = 0,
    uint32_t limit_last = 0) {
  PersistedQueryParamsBuilder builder_(_fbb);
  builder_.add_limit_last(limit_last);
  builder_.add_limit_first(limit_first);
  builder_.add_equal_to_child_key(equal_to_child_key);
  builder_.add_equal_to_value(equal_to_value);
  builder_.add_end_at_child_key(end_at_child_key);
  builder_.add_end_at_value(end_at_value);
  builder_.add_start_at_child_key(start_at_child_key);
  builder_.add_start_at_value(start_at_value);
  builder_.add_order_by_child(order_by_child);
  builder_.add_order_by(order_by);
  return builder_.Finish();
}

inline flatbuffers::Offset<PersistedQueryParams> CreatePersistedQueryParamsDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    firebase::database::internal::persistence::OrderBy order_by = firebase::database::internal::persistence::OrderBy_Priority,
    const char *order_by_child = nullptr,
    const std::vector<uint8_t> *start_at_value = nullptr,
    const char *start_at_child_key = nullptr,
    const std::vector<uint8_t> *end_at_value = nullptr,
    const char *end_at_child_key = nullptr,
    const std::vector<uint8_t> *equal_to_value = nullptr,
    const char *equal_to_child_key = nullptr,
    uint32_t limit_first = 0,
    uint32_t limit_last = 0) {
  auto order_by_child__ = order_by_child ? _fbb.CreateString(order_by_child) : 0;
  auto start_at_value__ = start_at_value ? _fbb.CreateVector<uint8_t>(*start_at_value) : 0;
  auto start_at_child_key__ = start_at_child_key ? _fbb.CreateString(start_at_child_key) : 0;
  auto end_at_value__ = end_at_value ? _fbb.CreateVector<uint8_t>(*end_at_value) : 0;
  auto end_at_child_key__ = end_at_child_key ? _fbb.CreateString(end_at_child_key) : 0;
  auto equal_to_value__ = equal_to_value ? _fbb.CreateVector<uint8_t>(*equal_to_value) : 0;
  auto equal_to_child_key__ = equal_to_child_key ? _fbb.CreateString(equal_to_child_key) : 0;
  return firebase::database::internal::persistence::CreatePersistedQueryParams(
      _fbb,
      order_by,
      order_by_child__,
      start_at_value__,
      start_at_child_key__,
      end_at_value__,
      end_at_child_key__,
      equal_to_value__,
      equal_to_child_key__,
      limit_first,
      limit_last);
}

flatbuffers::Offset<PersistedQueryParams> CreatePersistedQueryParams(flatbuffers::FlatBufferBuilder &_fbb, const PersistedQueryParamsT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline PersistedQueryParamsT *PersistedQueryParams::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  flatbuffers::unique_ptr<firebase::database::internal::persistence::PersistedQueryParamsT> _o = flatbuffers::unique_ptr<firebase::database::internal::persistence::PersistedQueryParamsT>(new PersistedQueryParamsT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void PersistedQueryParams::UnPackTo(PersistedQueryParamsT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = order_by(); _o->order_by = _e; }
  { auto _e = order_by_child(); if (_e) _o->order_by_child = _e->str(); }
  { auto _e = start_at_value(); if (_e) { _o->start_at_value.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->start_at_value[_i] = _e->Get(_i); } } }
  { auto _e = start_at_child_key(); if (_e) _o->start_at_child_key = _e->str(); }
  { auto _e = end_at_value(); if (_e) { _o->end_at_value.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->end_at_value[_i] = _e->Get(_i); } } }
  { auto _e = end_at_child_key(); if (_e) _o->end_at_child_key = _e->str(); }
  { auto _e = equal_to_value(); if (_e) { _o->equal_to_value.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->equal_to_value[_i] = _e->Get(_i); } } }
  { auto _e = equal_to_child_key(); if (_e) _o->equal_to_child_key = _e->str(); }
  { auto _e = limit_first(); _o->limit_first = _e; }
  { auto _e = limit_last(); _o->limit_last = _e; }
}

inline flatbuffers::Offset<PersistedQueryParams> PersistedQueryParams::Pack(flatbuffers::FlatBufferBuilder &_fbb, const PersistedQueryParamsT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreatePersistedQueryParams(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<PersistedQueryParams> CreatePersistedQueryParams(flatbuffers::FlatBufferBuilder &_fbb, const PersistedQueryParamsT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const PersistedQueryParamsT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _order_by = _o->order_by;
  auto _order_by_child = _o->order_by_child.empty() ? 0 : _fbb.CreateString(_o->order_by_child);
  auto _start_at_value = _o->start_at_value.size() ? _fbb.CreateVector(_o->start_at_value) : 0;
  auto _start_at_child_key = _o->start_at_child_key.empty() ? 0 : _fbb.CreateString(_o->start_at_child_key);
  auto _end_at_value = _o->end_at_value.size() ? _fbb.CreateVector(_o->end_at_value) : 0;
  auto _end_at_child_key = _o->end_at_child_key.empty() ? 0 : _fbb.CreateString(_o->end_at_child_key);
  auto _equal_to_value = _o->equal_to_value.size() ? _fbb.CreateVector(_o->equal_to_value) : 0;
  auto _equal_to_child_key = _o->equal_to_child_key.empty() ? 0 : _fbb.CreateString(_o->equal_to_child_key);
  auto _limit_first = _o->limit_first;
  auto _limit_last = _o->limit_last;
  return firebase::database::internal::persistence::CreatePersistedQueryParams(
      _fbb,
      _order_by,
      _order_by_child,
      _start_at_value,
      _start_at_child_key,
      _end_at_value,
      _end_at_child_key,
      _equal_to_value,
      _equal_to_child_key,
      _limit_first,
      _limit_last);
}

inline const firebase::database::internal::persistence::PersistedQueryParams *GetPersistedQueryParams(const void *buf) {
  return flatbuffers::GetRoot<firebase::database::internal::persistence::PersistedQueryParams>(buf);
}

inline const firebase::database::internal::persistence::PersistedQueryParams *GetSizePrefixedPersistedQueryParams(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<firebase::database::internal::persistence::PersistedQueryParams>(buf);
}

inline bool VerifyPersistedQueryParamsBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<firebase::database::internal::persistence::PersistedQueryParams>(nullptr);
}

inline bool VerifySizePrefixedPersistedQueryParamsBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<firebase::database::internal::persistence::PersistedQueryParams>(nullptr);
}

inline void FinishPersistedQueryParamsBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<firebase::database::internal::persistence::PersistedQueryParams> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPersistedQueryParamsBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<firebase::database::internal::persistence::PersistedQueryParams> root) {
  fbb.FinishSizePrefixed(root);
}

inline flatbuffers::unique_ptr<firebase::database::internal::persistence::PersistedQueryParamsT> UnPackPersistedQueryParams(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return flatbuffers::unique_ptr<firebase::database::internal::persistence::PersistedQueryParamsT>(GetPersistedQueryParams(buf)->UnPack(res));
}

inline flatbuffers::unique_ptr<firebase::database::internal::persistence::PersistedQueryParamsT> UnPackSizePrefixedPersistedQueryParams(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return flatbuffers::unique_ptr<firebase::database::internal::persistence::PersistedQueryParamsT>(GetSizePrefixedPersistedQueryParams(buf)->UnPack(res));
}

}  // namespace persistence
}  // namespace internal
}  // namespace database
}  // namespace firebase

#endif  // FLATBUFFERS_GENERATED_PERSISTEDQUERYPARAMS_FIREBASE_DATABASE_INTERNAL_PERSISTENCE_H_
