// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GOOGLESERVICES_FIREBASE_FBS_H_
#define FLATBUFFERS_GENERATED_GOOGLESERVICES_FIREBASE_FBS_H_

#include "flatbuffers/flatbuffers.h"

namespace firebase {
namespace fbs {

struct ProjectInfo;
struct ProjectInfoBuilder;
struct ProjectInfoT;

struct AndroidClientInfo;
struct AndroidClientInfoBuilder;
struct AndroidClientInfoT;

struct ClientInfo;
struct ClientInfoBuilder;
struct ClientInfoT;

struct AndroidInfo;
struct AndroidInfoBuilder;
struct AndroidInfoT;

struct OAuthClient;
struct OAuthClientBuilder;
struct OAuthClientT;

struct ApiKey;
struct ApiKeyBuilder;
struct ApiKeyT;

struct AnalyticsProperty;
struct AnalyticsPropertyBuilder;
struct AnalyticsPropertyT;

struct AnalyticsService;
struct AnalyticsServiceBuilder;
struct AnalyticsServiceT;

struct AppInviteService;
struct AppInviteServiceBuilder;
struct AppInviteServiceT;

struct AdsService;
struct AdsServiceBuilder;
struct AdsServiceT;

struct Services;
struct ServicesBuilder;
struct ServicesT;

struct Client;
struct ClientBuilder;
struct ClientT;

struct GoogleServices;
struct GoogleServicesBuilder;
struct GoogleServicesT;

struct ProjectInfoT : public flatbuffers::NativeTable {
  typedef ProjectInfo TableType;
  std::string project_number;
  std::string firebase_url;
  std::string project_id;
  std::string storage_bucket;
  ProjectInfoT() {
  }
};

struct ProjectInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ProjectInfoT NativeTableType;
  typedef ProjectInfoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PROJECT_NUMBER = 4,
    VT_FIREBASE_URL = 6,
    VT_PROJECT_ID = 8,
    VT_STORAGE_BUCKET = 10
  };
  const flatbuffers::String *project_number() const {
    return GetPointer<const flatbuffers::String *>(VT_PROJECT_NUMBER);
  }
  const flatbuffers::String *firebase_url() const {
    return GetPointer<const flatbuffers::String *>(VT_FIREBASE_URL);
  }
  const flatbuffers::String *project_id() const {
    return GetPointer<const flatbuffers::String *>(VT_PROJECT_ID);
  }
  const flatbuffers::String *storage_bucket() const {
    return GetPointer<const flatbuffers::String *>(VT_STORAGE_BUCKET);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PROJECT_NUMBER) &&
           verifier.VerifyString(project_number()) &&
           VerifyOffset(verifier, VT_FIREBASE_URL) &&
           verifier.VerifyString(firebase_url()) &&
           VerifyOffset(verifier, VT_PROJECT_ID) &&
           verifier.VerifyString(project_id()) &&
           VerifyOffset(verifier, VT_STORAGE_BUCKET) &&
           verifier.VerifyString(storage_bucket()) &&
           verifier.EndTable();
  }
  ProjectInfoT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ProjectInfoT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<ProjectInfo> Pack(flatbuffers::FlatBufferBuilder &_fbb, const ProjectInfoT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ProjectInfoBuilder {
  typedef ProjectInfo Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_project_number(flatbuffers::Offset<flatbuffers::String> project_number) {
    fbb_.AddOffset(ProjectInfo::VT_PROJECT_NUMBER, project_number);
  }
  void add_firebase_url(flatbuffers::Offset<flatbuffers::String> firebase_url) {
    fbb_.AddOffset(ProjectInfo::VT_FIREBASE_URL, firebase_url);
  }
  void add_project_id(flatbuffers::Offset<flatbuffers::String> project_id) {
    fbb_.AddOffset(ProjectInfo::VT_PROJECT_ID, project_id);
  }
  void add_storage_bucket(flatbuffers::Offset<flatbuffers::String> storage_bucket) {
    fbb_.AddOffset(ProjectInfo::VT_STORAGE_BUCKET, storage_bucket);
  }
  explicit ProjectInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ProjectInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ProjectInfo>(end);
    return o;
  }
};

inline flatbuffers::Offset<ProjectInfo> CreateProjectInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> project_number = 0,
    flatbuffers::Offset<flatbuffers::String> firebase_url = 0,
    flatbuffers::Offset<flatbuffers::String> project_id = 0,
    flatbuffers::Offset<flatbuffers::String> storage_bucket = 0) {
  ProjectInfoBuilder builder_(_fbb);
  builder_.add_storage_bucket(storage_bucket);
  builder_.add_project_id(project_id);
  builder_.add_firebase_url(firebase_url);
  builder_.add_project_number(project_number);
  return builder_.Finish();
}

inline flatbuffers::Offset<ProjectInfo> CreateProjectInfoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *project_number = nullptr,
    const char *firebase_url = nullptr,
    const char *project_id = nullptr,
    const char *storage_bucket = nullptr) {
  auto project_number__ = project_number ? _fbb.CreateString(project_number) : 0;
  auto firebase_url__ = firebase_url ? _fbb.CreateString(firebase_url) : 0;
  auto project_id__ = project_id ? _fbb.CreateString(project_id) : 0;
  auto storage_bucket__ = storage_bucket ? _fbb.CreateString(storage_bucket) : 0;
  return firebase::fbs::CreateProjectInfo(
      _fbb,
      project_number__,
      firebase_url__,
      project_id__,
      storage_bucket__);
}

flatbuffers::Offset<ProjectInfo> CreateProjectInfo(flatbuffers::FlatBufferBuilder &_fbb, const ProjectInfoT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct AndroidClientInfoT : public flatbuffers::NativeTable {
  typedef AndroidClientInfo TableType;
  std::string package_name;
  AndroidClientInfoT() {
  }
};

struct AndroidClientInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef AndroidClientInfoT NativeTableType;
  typedef AndroidClientInfoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PACKAGE_NAME = 4
  };
  const flatbuffers::String *package_name() const {
    return GetPointer<const flatbuffers::String *>(VT_PACKAGE_NAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PACKAGE_NAME) &&
           verifier.VerifyString(package_name()) &&
           verifier.EndTable();
  }
  AndroidClientInfoT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(AndroidClientInfoT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<AndroidClientInfo> Pack(flatbuffers::FlatBufferBuilder &_fbb, const AndroidClientInfoT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct AndroidClientInfoBuilder {
  typedef AndroidClientInfo Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_package_name(flatbuffers::Offset<flatbuffers::String> package_name) {
    fbb_.AddOffset(AndroidClientInfo::VT_PACKAGE_NAME, package_name);
  }
  explicit AndroidClientInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<AndroidClientInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AndroidClientInfo>(end);
    return o;
  }
};

inline flatbuffers::Offset<AndroidClientInfo> CreateAndroidClientInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> package_name = 0) {
  AndroidClientInfoBuilder builder_(_fbb);
  builder_.add_package_name(package_name);
  return builder_.Finish();
}

inline flatbuffers::Offset<AndroidClientInfo> CreateAndroidClientInfoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *package_name = nullptr) {
  auto package_name__ = package_name ? _fbb.CreateString(package_name) : 0;
  return firebase::fbs::CreateAndroidClientInfo(
      _fbb,
      package_name__);
}

flatbuffers::Offset<AndroidClientInfo> CreateAndroidClientInfo(flatbuffers::FlatBufferBuilder &_fbb, const AndroidClientInfoT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct ClientInfoT : public flatbuffers::NativeTable {
  typedef ClientInfo TableType;
  std::string mobilesdk_app_id;
  flatbuffers::unique_ptr<firebase::fbs::AndroidClientInfoT> android_client_info;
  ClientInfoT() {
  }
};

struct ClientInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ClientInfoT NativeTableType;
  typedef ClientInfoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MOBILESDK_APP_ID = 4,
    VT_ANDROID_CLIENT_INFO = 6
  };
  const flatbuffers::String *mobilesdk_app_id() const {
    return GetPointer<const flatbuffers::String *>(VT_MOBILESDK_APP_ID);
  }
  const firebase::fbs::AndroidClientInfo *android_client_info() const {
    return GetPointer<const firebase::fbs::AndroidClientInfo *>(VT_ANDROID_CLIENT_INFO);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MOBILESDK_APP_ID) &&
           verifier.VerifyString(mobilesdk_app_id()) &&
           VerifyOffset(verifier, VT_ANDROID_CLIENT_INFO) &&
           verifier.VerifyTable(android_client_info()) &&
           verifier.EndTable();
  }
  ClientInfoT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ClientInfoT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<ClientInfo> Pack(flatbuffers::FlatBufferBuilder &_fbb, const ClientInfoT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ClientInfoBuilder {
  typedef ClientInfo Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_mobilesdk_app_id(flatbuffers::Offset<flatbuffers::String> mobilesdk_app_id) {
    fbb_.AddOffset(ClientInfo::VT_MOBILESDK_APP_ID, mobilesdk_app_id);
  }
  void add_android_client_info(flatbuffers::Offset<firebase::fbs::AndroidClientInfo> android_client_info) {
    fbb_.AddOffset(ClientInfo::VT_ANDROID_CLIENT_INFO, android_client_info);
  }
  explicit ClientInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ClientInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ClientInfo>(end);
    return o;
  }
};

inline flatbuffers::Offset<ClientInfo> CreateClientInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> mobilesdk_app_id = 0,
    flatbuffers::Offset<firebase::fbs::AndroidClientInfo> android_client_info = 0) {
  ClientInfoBuilder builder_(_fbb);
  builder_.add_android_client_info(android_client_info);
  builder_.add_mobilesdk_app_id(mobilesdk_app_id);
  return builder_.Finish();
}

inline flatbuffers::Offset<ClientInfo> CreateClientInfoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *mobilesdk_app_id = nullptr,
    flatbuffers::Offset<firebase::fbs::AndroidClientInfo> android_client_info = 0) {
  auto mobilesdk_app_id__ = mobilesdk_app_id ? _fbb.CreateString(mobilesdk_app_id) : 0;
  return firebase::fbs::CreateClientInfo(
      _fbb,
      mobilesdk_app_id__,
      android_client_info);
}

flatbuffers::Offset<ClientInfo> CreateClientInfo(flatbuffers::FlatBufferBuilder &_fbb, const ClientInfoT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct AndroidInfoT : public flatbuffers::NativeTable {
  typedef AndroidInfo TableType;
  std::string package_name;
  std::string certificate_hash;
  AndroidInfoT() {
  }
};

struct AndroidInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef AndroidInfoT NativeTableType;
  typedef AndroidInfoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PACKAGE_NAME = 4,
    VT_CERTIFICATE_HASH = 6
  };
  const flatbuffers::String *package_name() const {
    return GetPointer<const flatbuffers::String *>(VT_PACKAGE_NAME);
  }
  const flatbuffers::String *certificate_hash() const {
    return GetPointer<const flatbuffers::String *>(VT_CERTIFICATE_HASH);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PACKAGE_NAME) &&
           verifier.VerifyString(package_name()) &&
           VerifyOffset(verifier, VT_CERTIFICATE_HASH) &&
           verifier.VerifyString(certificate_hash()) &&
           verifier.EndTable();
  }
  AndroidInfoT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(AndroidInfoT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<AndroidInfo> Pack(flatbuffers::FlatBufferBuilder &_fbb, const AndroidInfoT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct AndroidInfoBuilder {
  typedef AndroidInfo Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_package_name(flatbuffers::Offset<flatbuffers::String> package_name) {
    fbb_.AddOffset(AndroidInfo::VT_PACKAGE_NAME, package_name);
  }
  void add_certificate_hash(flatbuffers::Offset<flatbuffers::String> certificate_hash) {
    fbb_.AddOffset(AndroidInfo::VT_CERTIFICATE_HASH, certificate_hash);
  }
  explicit AndroidInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<AndroidInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AndroidInfo>(end);
    return o;
  }
};

inline flatbuffers::Offset<AndroidInfo> CreateAndroidInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> package_name = 0,
    flatbuffers::Offset<flatbuffers::String> certificate_hash = 0) {
  AndroidInfoBuilder builder_(_fbb);
  builder_.add_certificate_hash(certificate_hash);
  builder_.add_package_name(package_name);
  return builder_.Finish();
}

inline flatbuffers::Offset<AndroidInfo> CreateAndroidInfoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *package_name = nullptr,
    const char *certificate_hash = nullptr) {
  auto package_name__ = package_name ? _fbb.CreateString(package_name) : 0;
  auto certificate_hash__ = certificate_hash ? _fbb.CreateString(certificate_hash) : 0;
  return firebase::fbs::CreateAndroidInfo(
      _fbb,
      package_name__,
      certificate_hash__);
}

flatbuffers::Offset<AndroidInfo> CreateAndroidInfo(flatbuffers::FlatBufferBuilder &_fbb, const AndroidInfoT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct OAuthClientT : public flatbuffers::NativeTable {
  typedef OAuthClient TableType;
  std::string client_id;
  int32_t client_type;
  flatbuffers::unique_ptr<firebase::fbs::AndroidInfoT> android_info;
  OAuthClientT()
      : client_type(0) {
  }
};

struct OAuthClient FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef OAuthClientT NativeTableType;
  typedef OAuthClientBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CLIENT_ID = 4,
    VT_CLIENT_TYPE = 6,
    VT_ANDROID_INFO = 8
  };
  const flatbuffers::String *client_id() const {
    return GetPointer<const flatbuffers::String *>(VT_CLIENT_ID);
  }
  int32_t client_type() const {
    return GetField<int32_t>(VT_CLIENT_TYPE, 0);
  }
  const firebase::fbs::AndroidInfo *android_info() const {
    return GetPointer<const firebase::fbs::AndroidInfo *>(VT_ANDROID_INFO);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CLIENT_ID) &&
           verifier.VerifyString(client_id()) &&
           VerifyField<int32_t>(verifier, VT_CLIENT_TYPE) &&
           VerifyOffset(verifier, VT_ANDROID_INFO) &&
           verifier.VerifyTable(android_info()) &&
           verifier.EndTable();
  }
  OAuthClientT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(OAuthClientT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<OAuthClient> Pack(flatbuffers::FlatBufferBuilder &_fbb, const OAuthClientT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct OAuthClientBuilder {
  typedef OAuthClient Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_client_id(flatbuffers::Offset<flatbuffers::String> client_id) {
    fbb_.AddOffset(OAuthClient::VT_CLIENT_ID, client_id);
  }
  void add_client_type(int32_t client_type) {
    fbb_.AddElement<int32_t>(OAuthClient::VT_CLIENT_TYPE, client_type, 0);
  }
  void add_android_info(flatbuffers::Offset<firebase::fbs::AndroidInfo> android_info) {
    fbb_.AddOffset(OAuthClient::VT_ANDROID_INFO, android_info);
  }
  explicit OAuthClientBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<OAuthClient> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<OAuthClient>(end);
    return o;
  }
};

inline flatbuffers::Offset<OAuthClient> CreateOAuthClient(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> client_id = 0,
    int32_t client_type = 0,
    flatbuffers::Offset<firebase::fbs::AndroidInfo> android_info = 0) {
  OAuthClientBuilder builder_(_fbb);
  builder_.add_android_info(android_info);
  builder_.add_client_type(client_type);
  builder_.add_client_id(client_id);
  return builder_.Finish();
}

inline flatbuffers::Offset<OAuthClient> CreateOAuthClientDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *client_id = nullptr,
    int32_t client_type = 0,
    flatbuffers::Offset<firebase::fbs::AndroidInfo> android_info = 0) {
  auto client_id__ = client_id ? _fbb.CreateString(client_id) : 0;
  return firebase::fbs::CreateOAuthClient(
      _fbb,
      client_id__,
      client_type,
      android_info);
}

flatbuffers::Offset<OAuthClient> CreateOAuthClient(flatbuffers::FlatBufferBuilder &_fbb, const OAuthClientT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct ApiKeyT : public flatbuffers::NativeTable {
  typedef ApiKey TableType;
  std::string current_key;
  ApiKeyT() {
  }
};

struct ApiKey FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ApiKeyT NativeTableType;
  typedef ApiKeyBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CURRENT_KEY = 4
  };
  const flatbuffers::String *current_key() const {
    return GetPointer<const flatbuffers::String *>(VT_CURRENT_KEY);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CURRENT_KEY) &&
           verifier.VerifyString(current_key()) &&
           verifier.EndTable();
  }
  ApiKeyT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ApiKeyT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<ApiKey> Pack(flatbuffers::FlatBufferBuilder &_fbb, const ApiKeyT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ApiKeyBuilder {
  typedef ApiKey Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_current_key(flatbuffers::Offset<flatbuffers::String> current_key) {
    fbb_.AddOffset(ApiKey::VT_CURRENT_KEY, current_key);
  }
  explicit ApiKeyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ApiKey> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ApiKey>(end);
    return o;
  }
};

inline flatbuffers::Offset<ApiKey> CreateApiKey(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> current_key = 0) {
  ApiKeyBuilder builder_(_fbb);
  builder_.add_current_key(current_key);
  return builder_.Finish();
}

inline flatbuffers::Offset<ApiKey> CreateApiKeyDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *current_key = nullptr) {
  auto current_key__ = current_key ? _fbb.CreateString(current_key) : 0;
  return firebase::fbs::CreateApiKey(
      _fbb,
      current_key__);
}

flatbuffers::Offset<ApiKey> CreateApiKey(flatbuffers::FlatBufferBuilder &_fbb, const ApiKeyT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct AnalyticsPropertyT : public flatbuffers::NativeTable {
  typedef AnalyticsProperty TableType;
  std::string tracking_id;
  AnalyticsPropertyT() {
  }
};

struct AnalyticsProperty FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef AnalyticsPropertyT NativeTableType;
  typedef AnalyticsPropertyBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TRACKING_ID = 4
  };
  const flatbuffers::String *tracking_id() const {
    return GetPointer<const flatbuffers::String *>(VT_TRACKING_ID);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TRACKING_ID) &&
           verifier.VerifyString(tracking_id()) &&
           verifier.EndTable();
  }
  AnalyticsPropertyT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(AnalyticsPropertyT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<AnalyticsProperty> Pack(flatbuffers::FlatBufferBuilder &_fbb, const AnalyticsPropertyT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct AnalyticsPropertyBuilder {
  typedef AnalyticsProperty Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_tracking_id(flatbuffers::Offset<flatbuffers::String> tracking_id) {
    fbb_.AddOffset(AnalyticsProperty::VT_TRACKING_ID, tracking_id);
  }
  explicit AnalyticsPropertyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<AnalyticsProperty> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AnalyticsProperty>(end);
    return o;
  }
};

inline flatbuffers::Offset<AnalyticsProperty> CreateAnalyticsProperty(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> tracking_id = 0) {
  AnalyticsPropertyBuilder builder_(_fbb);
  builder_.add_tracking_id(tracking_id);
  return builder_.Finish();
}

inline flatbuffers::Offset<AnalyticsProperty> CreateAnalyticsPropertyDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *tracking_id = nullptr) {
  auto tracking_id__ = tracking_id ? _fbb.CreateString(tracking_id) : 0;
  return firebase::fbs::CreateAnalyticsProperty(
      _fbb,
      tracking_id__);
}

flatbuffers::Offset<AnalyticsProperty> CreateAnalyticsProperty(flatbuffers::FlatBufferBuilder &_fbb, const AnalyticsPropertyT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct AnalyticsServiceT : public flatbuffers::NativeTable {
  typedef AnalyticsService TableType;
  int32_t status;
  flatbuffers::unique_ptr<firebase::fbs::AnalyticsPropertyT> analytics_property;
  AnalyticsServiceT()
      : status(0) {
  }
};

struct AnalyticsService FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef AnalyticsServiceT NativeTableType;
  typedef AnalyticsServiceBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STATUS = 4,
    VT_ANALYTICS_PROPERTY = 6
  };
  int32_t status() const {
    return GetField<int32_t>(VT_STATUS, 0);
  }
  const firebase::fbs::AnalyticsProperty *analytics_property() const {
    return GetPointer<const firebase::fbs::AnalyticsProperty *>(VT_ANALYTICS_PROPERTY);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_STATUS) &&
           VerifyOffset(verifier, VT_ANALYTICS_PROPERTY) &&
           verifier.VerifyTable(analytics_property()) &&
           verifier.EndTable();
  }
  AnalyticsServiceT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(AnalyticsServiceT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<AnalyticsService> Pack(flatbuffers::FlatBufferBuilder &_fbb, const AnalyticsServiceT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct AnalyticsServiceBuilder {
  typedef AnalyticsService Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_status(int32_t status) {
    fbb_.AddElement<int32_t>(AnalyticsService::VT_STATUS, status, 0);
  }
  void add_analytics_property(flatbuffers::Offset<firebase::fbs::AnalyticsProperty> analytics_property) {
    fbb_.AddOffset(AnalyticsService::VT_ANALYTICS_PROPERTY, analytics_property);
  }
  explicit AnalyticsServiceBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<AnalyticsService> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AnalyticsService>(end);
    return o;
  }
};

inline flatbuffers::Offset<AnalyticsService> CreateAnalyticsService(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t status = 0,
    flatbuffers::Offset<firebase::fbs::AnalyticsProperty> analytics_property = 0) {
  AnalyticsServiceBuilder builder_(_fbb);
  builder_.add_analytics_property(analytics_property);
  builder_.add_status(status);
  return builder_.Finish();
}

flatbuffers::Offset<AnalyticsService> CreateAnalyticsService(flatbuffers::FlatBufferBuilder &_fbb, const AnalyticsServiceT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct AppInviteServiceT : public flatbuffers::NativeTable {
  typedef AppInviteService TableType;
  int32_t status;
  AppInviteServiceT()
      : status(0) {
  }
};

struct AppInviteService FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef AppInviteServiceT NativeTableType;
  typedef AppInviteServiceBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STATUS = 4
  };
  int32_t status() const {
    return GetField<int32_t>(VT_STATUS, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_STATUS) &&
           verifier.EndTable();
  }
  AppInviteServiceT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(AppInviteServiceT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<AppInviteService> Pack(flatbuffers::FlatBufferBuilder &_fbb, const AppInviteServiceT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct AppInviteServiceBuilder {
  typedef AppInviteService Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_status(int32_t status) {
    fbb_.AddElement<int32_t>(AppInviteService::VT_STATUS, status, 0);
  }
  explicit AppInviteServiceBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<AppInviteService> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AppInviteService>(end);
    return o;
  }
};

inline flatbuffers::Offset<AppInviteService> CreateAppInviteService(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t status = 0) {
  AppInviteServiceBuilder builder_(_fbb);
  builder_.add_status(status);
  return builder_.Finish();
}

flatbuffers::Offset<AppInviteService> CreateAppInviteService(flatbuffers::FlatBufferBuilder &_fbb, const AppInviteServiceT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct AdsServiceT : public flatbuffers::NativeTable {
  typedef AdsService TableType;
  int32_t status;
  std::string test_banner_ad_unit_id;
  std::string test_interstitial_ad_unit_id;
  flatbuffers::unique_ptr<firebase::fbs::AnalyticsServiceT> analytics_service;
  AdsServiceT()
      : status(0) {
  }
};

struct AdsService FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef AdsServiceT NativeTableType;
  typedef AdsServiceBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STATUS = 4,
    VT_TEST_BANNER_AD_UNIT_ID = 6,
    VT_TEST_INTERSTITIAL_AD_UNIT_ID = 8,
    VT_ANALYTICS_SERVICE = 10
  };
  int32_t status() const {
    return GetField<int32_t>(VT_STATUS, 0);
  }
  const flatbuffers::String *test_banner_ad_unit_id() const {
    return GetPointer<const flatbuffers::String *>(VT_TEST_BANNER_AD_UNIT_ID);
  }
  const flatbuffers::String *test_interstitial_ad_unit_id() const {
    return GetPointer<const flatbuffers::String *>(VT_TEST_INTERSTITIAL_AD_UNIT_ID);
  }
  const firebase::fbs::AnalyticsService *analytics_service() const {
    return GetPointer<const firebase::fbs::AnalyticsService *>(VT_ANALYTICS_SERVICE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_STATUS) &&
           VerifyOffset(verifier, VT_TEST_BANNER_AD_UNIT_ID) &&
           verifier.VerifyString(test_banner_ad_unit_id()) &&
           VerifyOffset(verifier, VT_TEST_INTERSTITIAL_AD_UNIT_ID) &&
           verifier.VerifyString(test_interstitial_ad_unit_id()) &&
           VerifyOffset(verifier, VT_ANALYTICS_SERVICE) &&
           verifier.VerifyTable(analytics_service()) &&
           verifier.EndTable();
  }
  AdsServiceT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(AdsServiceT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<AdsService> Pack(flatbuffers::FlatBufferBuilder &_fbb, const AdsServiceT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct AdsServiceBuilder {
  typedef AdsService Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_status(int32_t status) {
    fbb_.AddElement<int32_t>(AdsService::VT_STATUS, status, 0);
  }
  void add_test_banner_ad_unit_id(flatbuffers::Offset<flatbuffers::String> test_banner_ad_unit_id) {
    fbb_.AddOffset(AdsService::VT_TEST_BANNER_AD_UNIT_ID, test_banner_ad_unit_id);
  }
  void add_test_interstitial_ad_unit_id(flatbuffers::Offset<flatbuffers::String> test_interstitial_ad_unit_id) {
    fbb_.AddOffset(AdsService::VT_TEST_INTERSTITIAL_AD_UNIT_ID, test_interstitial_ad_unit_id);
  }
  void add_analytics_service(flatbuffers::Offset<firebase::fbs::AnalyticsService> analytics_service) {
    fbb_.AddOffset(AdsService::VT_ANALYTICS_SERVICE, analytics_service);
  }
  explicit AdsServiceBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<AdsService> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AdsService>(end);
    return o;
  }
};

inline flatbuffers::Offset<AdsService> CreateAdsService(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t status = 0,
    flatbuffers::Offset<flatbuffers::String> test_banner_ad_unit_id = 0,
    flatbuffers::Offset<flatbuffers::String> test_interstitial_ad_unit_id = 0,
    flatbuffers::Offset<firebase::fbs::AnalyticsService> analytics_service = 0) {
  AdsServiceBuilder builder_(_fbb);
  builder_.add_analytics_service(analytics_service);
  builder_.add_test_interstitial_ad_unit_id(test_interstitial_ad_unit_id);
  builder_.add_test_banner_ad_unit_id(test_banner_ad_unit_id);
  builder_.add_status(status);
  return builder_.Finish();
}

inline flatbuffers::Offset<AdsService> CreateAdsServiceDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t status = 0,
    const char *test_banner_ad_unit_id = nullptr,
    const char *test_interstitial_ad_unit_id = nullptr,
    flatbuffers::Offset<firebase::fbs::AnalyticsService> analytics_service = 0) {
  auto test_banner_ad_unit_id__ = test_banner_ad_unit_id ? _fbb.CreateString(test_banner_ad_unit_id) : 0;
  auto test_interstitial_ad_unit_id__ = test_interstitial_ad_unit_id ? _fbb.CreateString(test_interstitial_ad_unit_id) : 0;
  return firebase::fbs::CreateAdsService(
      _fbb,
      status,
      test_banner_ad_unit_id__,
      test_interstitial_ad_unit_id__,
      analytics_service);
}

flatbuffers::Offset<AdsService> CreateAdsService(flatbuffers::FlatBufferBuilder &_fbb, const AdsServiceT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct ServicesT : public flatbuffers::NativeTable {
  typedef Services TableType;
  flatbuffers::unique_ptr<firebase::fbs::AnalyticsServiceT> analytics_service;
  flatbuffers::unique_ptr<firebase::fbs::AppInviteServiceT> appinvite_service;
  flatbuffers::unique_ptr<firebase::fbs::AdsServiceT> ads_service;
  ServicesT() {
  }
};

struct Services FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ServicesT NativeTableType;
  typedef ServicesBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ANALYTICS_SERVICE = 4,
    VT_APPINVITE_SERVICE = 6,
    VT_ADS_SERVICE = 8
  };
  const firebase::fbs::AnalyticsService *analytics_service() const {
    return GetPointer<const firebase::fbs::AnalyticsService *>(VT_ANALYTICS_SERVICE);
  }
  const firebase::fbs::AppInviteService *appinvite_service() const {
    return GetPointer<const firebase::fbs::AppInviteService *>(VT_APPINVITE_SERVICE);
  }
  const firebase::fbs::AdsService *ads_service() const {
    return GetPointer<const firebase::fbs::AdsService *>(VT_ADS_SERVICE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ANALYTICS_SERVICE) &&
           verifier.VerifyTable(analytics_service()) &&
           VerifyOffset(verifier, VT_APPINVITE_SERVICE) &&
           verifier.VerifyTable(appinvite_service()) &&
           VerifyOffset(verifier, VT_ADS_SERVICE) &&
           verifier.VerifyTable(ads_service()) &&
           verifier.EndTable();
  }
  ServicesT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ServicesT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Services> Pack(flatbuffers::FlatBufferBuilder &_fbb, const ServicesT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ServicesBuilder {
  typedef Services Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_analytics_service(flatbuffers::Offset<firebase::fbs::AnalyticsService> analytics_service) {
    fbb_.AddOffset(Services::VT_ANALYTICS_SERVICE, analytics_service);
  }
  void add_appinvite_service(flatbuffers::Offset<firebase::fbs::AppInviteService> appinvite_service) {
    fbb_.AddOffset(Services::VT_APPINVITE_SERVICE, appinvite_service);
  }
  void add_ads_service(flatbuffers::Offset<firebase::fbs::AdsService> ads_service) {
    fbb_.AddOffset(Services::VT_ADS_SERVICE, ads_service);
  }
  explicit ServicesBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Services> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Services>(end);
    return o;
  }
};

inline flatbuffers::Offset<Services> CreateServices(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<firebase::fbs::AnalyticsService> analytics_service = 0,
    flatbuffers::Offset<firebase::fbs::AppInviteService> appinvite_service = 0,
    flatbuffers::Offset<firebase::fbs::AdsService> ads_service = 0) {
  ServicesBuilder builder_(_fbb);
  builder_.add_ads_service(ads_service);
  builder_.add_appinvite_service(appinvite_service);
  builder_.add_analytics_service(analytics_service);
  return builder_.Finish();
}

flatbuffers::Offset<Services> CreateServices(flatbuffers::FlatBufferBuilder &_fbb, const ServicesT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct ClientT : public flatbuffers::NativeTable {
  typedef Client TableType;
  flatbuffers::unique_ptr<firebase::fbs::ClientInfoT> client_info;
  std::vector<flatbuffers::unique_ptr<firebase::fbs::OAuthClientT>> oauth_client;
  std::vector<flatbuffers::unique_ptr<firebase::fbs::ApiKeyT>> api_key;
  flatbuffers::unique_ptr<firebase::fbs::ServicesT> services;
  ClientT() {
  }
};

struct Client FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ClientT NativeTableType;
  typedef ClientBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CLIENT_INFO = 4,
    VT_OAUTH_CLIENT = 6,
    VT_API_KEY = 8,
    VT_SERVICES = 10
  };
  const firebase::fbs::ClientInfo *client_info() const {
    return GetPointer<const firebase::fbs::ClientInfo *>(VT_CLIENT_INFO);
  }
  const flatbuffers::Vector<flatbuffers::Offset<firebase::fbs::OAuthClient>> *oauth_client() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<firebase::fbs::OAuthClient>> *>(VT_OAUTH_CLIENT);
  }
  const flatbuffers::Vector<flatbuffers::Offset<firebase::fbs::ApiKey>> *api_key() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<firebase::fbs::ApiKey>> *>(VT_API_KEY);
  }
  const firebase::fbs::Services *services() const {
    return GetPointer<const firebase::fbs::Services *>(VT_SERVICES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CLIENT_INFO) &&
           verifier.VerifyTable(client_info()) &&
           VerifyOffset(verifier, VT_OAUTH_CLIENT) &&
           verifier.VerifyVector(oauth_client()) &&
           verifier.VerifyVectorOfTables(oauth_client()) &&
           VerifyOffset(verifier, VT_API_KEY) &&
           verifier.VerifyVector(api_key()) &&
           verifier.VerifyVectorOfTables(api_key()) &&
           VerifyOffset(verifier, VT_SERVICES) &&
           verifier.VerifyTable(services()) &&
           verifier.EndTable();
  }
  ClientT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ClientT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Client> Pack(flatbuffers::FlatBufferBuilder &_fbb, const ClientT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ClientBuilder {
  typedef Client Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_client_info(flatbuffers::Offset<firebase::fbs::ClientInfo> client_info) {
    fbb_.AddOffset(Client::VT_CLIENT_INFO, client_info);
  }
  void add_oauth_client(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<firebase::fbs::OAuthClient>>> oauth_client) {
    fbb_.AddOffset(Client::VT_OAUTH_CLIENT, oauth_client);
  }
  void add_api_key(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<firebase::fbs::ApiKey>>> api_key) {
    fbb_.AddOffset(Client::VT_API_KEY, api_key);
  }
  void add_services(flatbuffers::Offset<firebase::fbs::Services> services) {
    fbb_.AddOffset(Client::VT_SERVICES, services);
  }
  explicit ClientBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Client> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Client>(end);
    return o;
  }
};

inline flatbuffers::Offset<Client> CreateClient(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<firebase::fbs::ClientInfo> client_info = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<firebase::fbs::OAuthClient>>> oauth_client = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<firebase::fbs::ApiKey>>> api_key = 0,
    flatbuffers::Offset<firebase::fbs::Services> services = 0) {
  ClientBuilder builder_(_fbb);
  builder_.add_services(services);
  builder_.add_api_key(api_key);
  builder_.add_oauth_client(oauth_client);
  builder_.add_client_info(client_info);
  return builder_.Finish();
}

inline flatbuffers::Offset<Client> CreateClientDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<firebase::fbs::ClientInfo> client_info = 0,
    const std::vector<flatbuffers::Offset<firebase::fbs::OAuthClient>> *oauth_client = nullptr,
    const std::vector<flatbuffers::Offset<firebase::fbs::ApiKey>> *api_key = nullptr,
    flatbuffers::Offset<firebase::fbs::Services> services = 0) {
  auto oauth_client__ = oauth_client ? _fbb.CreateVector<flatbuffers::Offset<firebase::fbs::OAuthClient>>(*oauth_client) : 0;
  auto api_key__ = api_key ? _fbb.CreateVector<flatbuffers::Offset<firebase::fbs::ApiKey>>(*api_key) : 0;
  return firebase::fbs::CreateClient(
      _fbb,
      client_info,
      oauth_client__,
      api_key__,
      services);
}

flatbuffers::Offset<Client> CreateClient(flatbuffers::FlatBufferBuilder &_fbb, const ClientT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct GoogleServicesT : public flatbuffers::NativeTable {
  typedef GoogleServices TableType;
  flatbuffers::unique_ptr<firebase::fbs::ProjectInfoT> project_info;
  std::vector<flatbuffers::unique_ptr<firebase::fbs::ClientT>> client;
  std::string configuration_version;
  GoogleServicesT() {
  }
};

struct GoogleServices FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef GoogleServicesT NativeTableType;
  typedef GoogleServicesBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PROJECT_INFO = 4,
    VT_CLIENT = 6,
    VT_CONFIGURATION_VERSION = 8
  };
  const firebase::fbs::ProjectInfo *project_info() const {
    return GetPointer<const firebase::fbs::ProjectInfo *>(VT_PROJECT_INFO);
  }
  const flatbuffers::Vector<flatbuffers::Offset<firebase::fbs::Client>> *client() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<firebase::fbs::Client>> *>(VT_CLIENT);
  }
  const flatbuffers::String *configuration_version() const {
    return GetPointer<const flatbuffers::String *>(VT_CONFIGURATION_VERSION);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PROJECT_INFO) &&
           verifier.VerifyTable(project_info()) &&
           VerifyOffset(verifier, VT_CLIENT) &&
           verifier.VerifyVector(client()) &&
           verifier.VerifyVectorOfTables(client()) &&
           VerifyOffset(verifier, VT_CONFIGURATION_VERSION) &&
           verifier.VerifyString(configuration_version()) &&
           verifier.EndTable();
  }
  GoogleServicesT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(GoogleServicesT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<GoogleServices> Pack(flatbuffers::FlatBufferBuilder &_fbb, const GoogleServicesT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct GoogleServicesBuilder {
  typedef GoogleServices Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_project_info(flatbuffers::Offset<firebase::fbs::ProjectInfo> project_info) {
    fbb_.AddOffset(GoogleServices::VT_PROJECT_INFO, project_info);
  }
  void add_client(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<firebase::fbs::Client>>> client) {
    fbb_.AddOffset(GoogleServices::VT_CLIENT, client);
  }
  void add_configuration_version(flatbuffers::Offset<flatbuffers::String> configuration_version) {
    fbb_.AddOffset(GoogleServices::VT_CONFIGURATION_VERSION, configuration_version);
  }
  explicit GoogleServicesBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<GoogleServices> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GoogleServices>(end);
    return o;
  }
};

inline flatbuffers::Offset<GoogleServices> CreateGoogleServices(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<firebase::fbs::ProjectInfo> project_info = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<firebase::fbs::Client>>> client = 0,
    flatbuffers::Offset<flatbuffers::String> configuration_version = 0) {
  GoogleServicesBuilder builder_(_fbb);
  builder_.add_configuration_version(configuration_version);
  builder_.add_client(client);
  builder_.add_project_info(project_info);
  return builder_.Finish();
}

inline flatbuffers::Offset<GoogleServices> CreateGoogleServicesDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<firebase::fbs::ProjectInfo> project_info = 0,
    const std::vector<flatbuffers::Offset<firebase::fbs::Client>> *client = nullptr,
    const char *configuration_version = nullptr) {
  auto client__ = client ? _fbb.CreateVector<flatbuffers::Offset<firebase::fbs::Client>>(*client) : 0;
  auto configuration_version__ = configuration_version ? _fbb.CreateString(configuration_version) : 0;
  return firebase::fbs::CreateGoogleServices(
      _fbb,
      project_info,
      client__,
      configuration_version__);
}

flatbuffers::Offset<GoogleServices> CreateGoogleServices(flatbuffers::FlatBufferBuilder &_fbb, const GoogleServicesT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline ProjectInfoT *ProjectInfo::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  flatbuffers::unique_ptr<firebase::fbs::ProjectInfoT> _o = flatbuffers::unique_ptr<firebase::fbs::ProjectInfoT>(new ProjectInfoT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void ProjectInfo::UnPackTo(ProjectInfoT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = project_number(); if (_e) _o->project_number = _e->str(); }
  { auto _e = firebase_url(); if (_e) _o->firebase_url = _e->str(); }
  { auto _e = project_id(); if (_e) _o->project_id = _e->str(); }
  { auto _e = storage_bucket(); if (_e) _o->storage_bucket = _e->str(); }
}

inline flatbuffers::Offset<ProjectInfo> ProjectInfo::Pack(flatbuffers::FlatBufferBuilder &_fbb, const ProjectInfoT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateProjectInfo(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<ProjectInfo> CreateProjectInfo(flatbuffers::FlatBufferBuilder &_fbb, const ProjectInfoT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const ProjectInfoT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _project_number = _o->project_number.empty() ? 0 : _fbb.CreateString(_o->project_number);
  auto _firebase_url = _o->firebase_url.empty() ? 0 : _fbb.CreateString(_o->firebase_url);
  auto _project_id = _o->project_id.empty() ? 0 : _fbb.CreateString(_o->project_id);
  auto _storage_bucket = _o->storage_bucket.empty() ? 0 : _fbb.CreateString(_o->storage_bucket);
  return firebase::fbs::CreateProjectInfo(
      _fbb,
      _project_number,
      _firebase_url,
      _project_id,
      _storage_bucket);
}

inline AndroidClientInfoT *AndroidClientInfo::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  flatbuffers::unique_ptr<firebase::fbs::AndroidClientInfoT> _o = flatbuffers::unique_ptr<firebase::fbs::AndroidClientInfoT>(new AndroidClientInfoT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void AndroidClientInfo::UnPackTo(AndroidClientInfoT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = package_name(); if (_e) _o->package_name = _e->str(); }
}

inline flatbuffers::Offset<AndroidClientInfo> AndroidClientInfo::Pack(flatbuffers::FlatBufferBuilder &_fbb, const AndroidClientInfoT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateAndroidClientInfo(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<AndroidClientInfo> CreateAndroidClientInfo(flatbuffers::FlatBufferBuilder &_fbb, const AndroidClientInfoT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const AndroidClientInfoT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _package_name = _o->package_name.empty() ? 0 : _fbb.CreateString(_o->package_name);
  return firebase::fbs::CreateAndroidClientInfo(
      _fbb,
      _package_name);
}

inline ClientInfoT *ClientInfo::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  flatbuffers::unique_ptr<firebase::fbs::ClientInfoT> _o = flatbuffers::unique_ptr<firebase::fbs::ClientInfoT>(new ClientInfoT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void ClientInfo::UnPackTo(ClientInfoT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = mobilesdk_app_id(); if (_e) _o->mobilesdk_app_id = _e->str(); }
  { auto _e = android_client_info(); if (_e) _o->android_client_info = flatbuffers::unique_ptr<firebase::fbs::AndroidClientInfoT>(_e->UnPack(_resolver)); }
}

inline flatbuffers::Offset<ClientInfo> ClientInfo::Pack(flatbuffers::FlatBufferBuilder &_fbb, const ClientInfoT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateClientInfo(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<ClientInfo> CreateClientInfo(flatbuffers::FlatBufferBuilder &_fbb, const ClientInfoT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const ClientInfoT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _mobilesdk_app_id = _o->mobilesdk_app_id.empty() ? 0 : _fbb.CreateString(_o->mobilesdk_app_id);
  auto _android_client_info = _o->android_client_info ? CreateAndroidClientInfo(_fbb, _o->android_client_info.get(), _rehasher) : 0;
  return firebase::fbs::CreateClientInfo(
      _fbb,
      _mobilesdk_app_id,
      _android_client_info);
}

inline AndroidInfoT *AndroidInfo::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  flatbuffers::unique_ptr<firebase::fbs::AndroidInfoT> _o = flatbuffers::unique_ptr<firebase::fbs::AndroidInfoT>(new AndroidInfoT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void AndroidInfo::UnPackTo(AndroidInfoT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = package_name(); if (_e) _o->package_name = _e->str(); }
  { auto _e = certificate_hash(); if (_e) _o->certificate_hash = _e->str(); }
}

inline flatbuffers::Offset<AndroidInfo> AndroidInfo::Pack(flatbuffers::FlatBufferBuilder &_fbb, const AndroidInfoT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateAndroidInfo(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<AndroidInfo> CreateAndroidInfo(flatbuffers::FlatBufferBuilder &_fbb, const AndroidInfoT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const AndroidInfoT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _package_name = _o->package_name.empty() ? 0 : _fbb.CreateString(_o->package_name);
  auto _certificate_hash = _o->certificate_hash.empty() ? 0 : _fbb.CreateString(_o->certificate_hash);
  return firebase::fbs::CreateAndroidInfo(
      _fbb,
      _package_name,
      _certificate_hash);
}

inline OAuthClientT *OAuthClient::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  flatbuffers::unique_ptr<firebase::fbs::OAuthClientT> _o = flatbuffers::unique_ptr<firebase::fbs::OAuthClientT>(new OAuthClientT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void OAuthClient::UnPackTo(OAuthClientT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = client_id(); if (_e) _o->client_id = _e->str(); }
  { auto _e = client_type(); _o->client_type = _e; }
  { auto _e = android_info(); if (_e) _o->android_info = flatbuffers::unique_ptr<firebase::fbs::AndroidInfoT>(_e->UnPack(_resolver)); }
}

inline flatbuffers::Offset<OAuthClient> OAuthClient::Pack(flatbuffers::FlatBufferBuilder &_fbb, const OAuthClientT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateOAuthClient(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<OAuthClient> CreateOAuthClient(flatbuffers::FlatBufferBuilder &_fbb, const OAuthClientT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const OAuthClientT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _client_id = _o->client_id.empty() ? 0 : _fbb.CreateString(_o->client_id);
  auto _client_type = _o->client_type;
  auto _android_info = _o->android_info ? CreateAndroidInfo(_fbb, _o->android_info.get(), _rehasher) : 0;
  return firebase::fbs::CreateOAuthClient(
      _fbb,
      _client_id,
      _client_type,
      _android_info);
}

inline ApiKeyT *ApiKey::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  flatbuffers::unique_ptr<firebase::fbs::ApiKeyT> _o = flatbuffers::unique_ptr<firebase::fbs::ApiKeyT>(new ApiKeyT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void ApiKey::UnPackTo(ApiKeyT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = current_key(); if (_e) _o->current_key = _e->str(); }
}

inline flatbuffers::Offset<ApiKey> ApiKey::Pack(flatbuffers::FlatBufferBuilder &_fbb, const ApiKeyT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateApiKey(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<ApiKey> CreateApiKey(flatbuffers::FlatBufferBuilder &_fbb, const ApiKeyT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const ApiKeyT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _current_key = _o->current_key.empty() ? 0 : _fbb.CreateString(_o->current_key);
  return firebase::fbs::CreateApiKey(
      _fbb,
      _current_key);
}

inline AnalyticsPropertyT *AnalyticsProperty::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  flatbuffers::unique_ptr<firebase::fbs::AnalyticsPropertyT> _o = flatbuffers::unique_ptr<firebase::fbs::AnalyticsPropertyT>(new AnalyticsPropertyT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void AnalyticsProperty::UnPackTo(AnalyticsPropertyT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = tracking_id(); if (_e) _o->tracking_id = _e->str(); }
}

inline flatbuffers::Offset<AnalyticsProperty> AnalyticsProperty::Pack(flatbuffers::FlatBufferBuilder &_fbb, const AnalyticsPropertyT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateAnalyticsProperty(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<AnalyticsProperty> CreateAnalyticsProperty(flatbuffers::FlatBufferBuilder &_fbb, const AnalyticsPropertyT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const AnalyticsPropertyT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _tracking_id = _o->tracking_id.empty() ? 0 : _fbb.CreateString(_o->tracking_id);
  return firebase::fbs::CreateAnalyticsProperty(
      _fbb,
      _tracking_id);
}

inline AnalyticsServiceT *AnalyticsService::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  flatbuffers::unique_ptr<firebase::fbs::AnalyticsServiceT> _o = flatbuffers::unique_ptr<firebase::fbs::AnalyticsServiceT>(new AnalyticsServiceT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void AnalyticsService::UnPackTo(AnalyticsServiceT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = status(); _o->status = _e; }
  { auto _e = analytics_property(); if (_e) _o->analytics_property = flatbuffers::unique_ptr<firebase::fbs::AnalyticsPropertyT>(_e->UnPack(_resolver)); }
}

inline flatbuffers::Offset<AnalyticsService> AnalyticsService::Pack(flatbuffers::FlatBufferBuilder &_fbb, const AnalyticsServiceT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateAnalyticsService(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<AnalyticsService> CreateAnalyticsService(flatbuffers::FlatBufferBuilder &_fbb, const AnalyticsServiceT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const AnalyticsServiceT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _status = _o->status;
  auto _analytics_property = _o->analytics_property ? CreateAnalyticsProperty(_fbb, _o->analytics_property.get(), _rehasher) : 0;
  return firebase::fbs::CreateAnalyticsService(
      _fbb,
      _status,
      _analytics_property);
}

inline AppInviteServiceT *AppInviteService::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  flatbuffers::unique_ptr<firebase::fbs::AppInviteServiceT> _o = flatbuffers::unique_ptr<firebase::fbs::AppInviteServiceT>(new AppInviteServiceT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void AppInviteService::UnPackTo(AppInviteServiceT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = status(); _o->status = _e; }
}

inline flatbuffers::Offset<AppInviteService> AppInviteService::Pack(flatbuffers::FlatBufferBuilder &_fbb, const AppInviteServiceT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateAppInviteService(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<AppInviteService> CreateAppInviteService(flatbuffers::FlatBufferBuilder &_fbb, const AppInviteServiceT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const AppInviteServiceT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _status = _o->status;
  return firebase::fbs::CreateAppInviteService(
      _fbb,
      _status);
}

inline AdsServiceT *AdsService::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  flatbuffers::unique_ptr<firebase::fbs::AdsServiceT> _o = flatbuffers::unique_ptr<firebase::fbs::AdsServiceT>(new AdsServiceT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void AdsService::UnPackTo(AdsServiceT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = status(); _o->status = _e; }
  { auto _e = test_banner_ad_unit_id(); if (_e) _o->test_banner_ad_unit_id = _e->str(); }
  { auto _e = test_interstitial_ad_unit_id(); if (_e) _o->test_interstitial_ad_unit_id = _e->str(); }
  { auto _e = analytics_service(); if (_e) _o->analytics_service = flatbuffers::unique_ptr<firebase::fbs::AnalyticsServiceT>(_e->UnPack(_resolver)); }
}

inline flatbuffers::Offset<AdsService> AdsService::Pack(flatbuffers::FlatBufferBuilder &_fbb, const AdsServiceT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateAdsService(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<AdsService> CreateAdsService(flatbuffers::FlatBufferBuilder &_fbb, const AdsServiceT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const AdsServiceT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _status = _o->status;
  auto _test_banner_ad_unit_id = _o->test_banner_ad_unit_id.empty() ? 0 : _fbb.CreateString(_o->test_banner_ad_unit_id);
  auto _test_interstitial_ad_unit_id = _o->test_interstitial_ad_unit_id.empty() ? 0 : _fbb.CreateString(_o->test_interstitial_ad_unit_id);
  auto _analytics_service = _o->analytics_service ? CreateAnalyticsService(_fbb, _o->analytics_service.get(), _rehasher) : 0;
  return firebase::fbs::CreateAdsService(
      _fbb,
      _status,
      _test_banner_ad_unit_id,
      _test_interstitial_ad_unit_id,
      _analytics_service);
}

inline ServicesT *Services::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  flatbuffers::unique_ptr<firebase::fbs::ServicesT> _o = flatbuffers::unique_ptr<firebase::fbs::ServicesT>(new ServicesT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Services::UnPackTo(ServicesT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = analytics_service(); if (_e) _o->analytics_service = flatbuffers::unique_ptr<firebase::fbs::AnalyticsServiceT>(_e->UnPack(_resolver)); }
  { auto _e = appinvite_service(); if (_e) _o->appinvite_service = flatbuffers::unique_ptr<firebase::fbs::AppInviteServiceT>(_e->UnPack(_resolver)); }
  { auto _e = ads_service(); if (_e) _o->ads_service = flatbuffers::unique_ptr<firebase::fbs::AdsServiceT>(_e->UnPack(_resolver)); }
}

inline flatbuffers::Offset<Services> Services::Pack(flatbuffers::FlatBufferBuilder &_fbb, const ServicesT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateServices(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Services> CreateServices(flatbuffers::FlatBufferBuilder &_fbb, const ServicesT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const ServicesT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _analytics_service = _o->analytics_service ? CreateAnalyticsService(_fbb, _o->analytics_service.get(), _rehasher) : 0;
  auto _appinvite_service = _o->appinvite_service ? CreateAppInviteService(_fbb, _o->appinvite_service.get(), _rehasher) : 0;
  auto _ads_service = _o->ads_service ? CreateAdsService(_fbb, _o->ads_service.get(), _rehasher) : 0;
  return firebase::fbs::CreateServices(
      _fbb,
      _analytics_service,
      _appinvite_service,
      _ads_service);
}

inline ClientT *Client::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  flatbuffers::unique_ptr<firebase::fbs::ClientT> _o = flatbuffers::unique_ptr<firebase::fbs::ClientT>(new ClientT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Client::UnPackTo(ClientT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = client_info(); if (_e) _o->client_info = flatbuffers::unique_ptr<firebase::fbs::ClientInfoT>(_e->UnPack(_resolver)); }
  { auto _e = oauth_client(); if (_e) { _o->oauth_client.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->oauth_client[_i] = flatbuffers::unique_ptr<firebase::fbs::OAuthClientT>(_e->Get(_i)->UnPack(_resolver)); } } }
  { auto _e = api_key(); if (_e) { _o->api_key.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->api_key[_i] = flatbuffers::unique_ptr<firebase::fbs::ApiKeyT>(_e->Get(_i)->UnPack(_resolver)); } } }
  { auto _e = services(); if (_e) _o->services = flatbuffers::unique_ptr<firebase::fbs::ServicesT>(_e->UnPack(_resolver)); }
}

inline flatbuffers::Offset<Client> Client::Pack(flatbuffers::FlatBufferBuilder &_fbb, const ClientT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateClient(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Client> CreateClient(flatbuffers::FlatBufferBuilder &_fbb, const ClientT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const ClientT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _client_info = _o->client_info ? CreateClientInfo(_fbb, _o->client_info.get(), _rehasher) : 0;
  auto _oauth_client = _o->oauth_client.size() ? _fbb.CreateVector<flatbuffers::Offset<firebase::fbs::OAuthClient>> (_o->oauth_client.size(), [](size_t i, _VectorArgs *__va) { return CreateOAuthClient(*__va->__fbb, __va->__o->oauth_client[i].get(), __va->__rehasher); }, &_va ) : 0;
  auto _api_key = _o->api_key.size() ? _fbb.CreateVector<flatbuffers::Offset<firebase::fbs::ApiKey>> (_o->api_key.size(), [](size_t i, _VectorArgs *__va) { return CreateApiKey(*__va->__fbb, __va->__o->api_key[i].get(), __va->__rehasher); }, &_va ) : 0;
  auto _services = _o->services ? CreateServices(_fbb, _o->services.get(), _rehasher) : 0;
  return firebase::fbs::CreateClient(
      _fbb,
      _client_info,
      _oauth_client,
      _api_key,
      _services);
}

inline GoogleServicesT *GoogleServices::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  flatbuffers::unique_ptr<firebase::fbs::GoogleServicesT> _o = flatbuffers::unique_ptr<firebase::fbs::GoogleServicesT>(new GoogleServicesT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void GoogleServices::UnPackTo(GoogleServicesT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = project_info(); if (_e) _o->project_info = flatbuffers::unique_ptr<firebase::fbs::ProjectInfoT>(_e->UnPack(_resolver)); }
  { auto _e = client(); if (_e) { _o->client.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->client[_i] = flatbuffers::unique_ptr<firebase::fbs::ClientT>(_e->Get(_i)->UnPack(_resolver)); } } }
  { auto _e = configuration_version(); if (_e) _o->configuration_version = _e->str(); }
}

inline flatbuffers::Offset<GoogleServices> GoogleServices::Pack(flatbuffers::FlatBufferBuilder &_fbb, const GoogleServicesT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateGoogleServices(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<GoogleServices> CreateGoogleServices(flatbuffers::FlatBufferBuilder &_fbb, const GoogleServicesT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const GoogleServicesT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _project_info = _o->project_info ? CreateProjectInfo(_fbb, _o->project_info.get(), _rehasher) : 0;
  auto _client = _o->client.size() ? _fbb.CreateVector<flatbuffers::Offset<firebase::fbs::Client>> (_o->client.size(), [](size_t i, _VectorArgs *__va) { return CreateClient(*__va->__fbb, __va->__o->client[i].get(), __va->__rehasher); }, &_va ) : 0;
  auto _configuration_version = _o->configuration_version.empty() ? 0 : _fbb.CreateString(_o->configuration_version);
  return firebase::fbs::CreateGoogleServices(
      _fbb,
      _project_info,
      _client,
      _configuration_version);
}

inline const firebase::fbs::GoogleServices *GetGoogleServices(const void *buf) {
  return flatbuffers::GetRoot<firebase::fbs::GoogleServices>(buf);
}

inline const firebase::fbs::GoogleServices *GetSizePrefixedGoogleServices(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<firebase::fbs::GoogleServices>(buf);
}

inline bool VerifyGoogleServicesBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<firebase::fbs::GoogleServices>(nullptr);
}

inline bool VerifySizePrefixedGoogleServicesBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<firebase::fbs::GoogleServices>(nullptr);
}

inline void FinishGoogleServicesBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<firebase::fbs::GoogleServices> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedGoogleServicesBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<firebase::fbs::GoogleServices> root) {
  fbb.FinishSizePrefixed(root);
}

inline flatbuffers::unique_ptr<firebase::fbs::GoogleServicesT> UnPackGoogleServices(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return flatbuffers::unique_ptr<firebase::fbs::GoogleServicesT>(GetGoogleServices(buf)->UnPack(res));
}

inline flatbuffers::unique_ptr<firebase::fbs::GoogleServicesT> UnPackSizePrefixedGoogleServices(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return flatbuffers::unique_ptr<firebase::fbs::GoogleServicesT>(GetSizePrefixedGoogleServices(buf)->UnPack(res));
}

}  // namespace fbs
}  // namespace firebase

#endif  // FLATBUFFERS_GENERATED_GOOGLESERVICES_FIREBASE_FBS_H_
