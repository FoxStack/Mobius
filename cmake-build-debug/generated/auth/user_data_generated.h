// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_USERDATA_FIREBASE_AUTH_H_
#define FLATBUFFERS_GENERATED_USERDATA_FIREBASE_AUTH_H_

#include "flatbuffers/flatbuffers.h"

namespace firebase {
namespace auth {

struct UserProviderData;
struct UserProviderDataBuilder;
struct UserProviderDataT;

struct UserDataDesktop;
struct UserDataDesktopBuilder;
struct UserDataDesktopT;

struct UserProviderDataT : public flatbuffers::NativeTable {
  typedef UserProviderData TableType;
  std::string uid;
  std::string email;
  std::string display_name;
  std::string photo_url;
  std::string provider_id;
  std::string phone_number;
  UserProviderDataT() {
  }
};

struct UserProviderData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef UserProviderDataT NativeTableType;
  typedef UserProviderDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UID = 4,
    VT_EMAIL = 6,
    VT_DISPLAY_NAME = 8,
    VT_PHOTO_URL = 10,
    VT_PROVIDER_ID = 12,
    VT_PHONE_NUMBER = 14
  };
  const flatbuffers::String *uid() const {
    return GetPointer<const flatbuffers::String *>(VT_UID);
  }
  const flatbuffers::String *email() const {
    return GetPointer<const flatbuffers::String *>(VT_EMAIL);
  }
  const flatbuffers::String *display_name() const {
    return GetPointer<const flatbuffers::String *>(VT_DISPLAY_NAME);
  }
  const flatbuffers::String *photo_url() const {
    return GetPointer<const flatbuffers::String *>(VT_PHOTO_URL);
  }
  const flatbuffers::String *provider_id() const {
    return GetPointer<const flatbuffers::String *>(VT_PROVIDER_ID);
  }
  const flatbuffers::String *phone_number() const {
    return GetPointer<const flatbuffers::String *>(VT_PHONE_NUMBER);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_UID) &&
           verifier.VerifyString(uid()) &&
           VerifyOffset(verifier, VT_EMAIL) &&
           verifier.VerifyString(email()) &&
           VerifyOffset(verifier, VT_DISPLAY_NAME) &&
           verifier.VerifyString(display_name()) &&
           VerifyOffset(verifier, VT_PHOTO_URL) &&
           verifier.VerifyString(photo_url()) &&
           VerifyOffset(verifier, VT_PROVIDER_ID) &&
           verifier.VerifyString(provider_id()) &&
           VerifyOffset(verifier, VT_PHONE_NUMBER) &&
           verifier.VerifyString(phone_number()) &&
           verifier.EndTable();
  }
  UserProviderDataT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(UserProviderDataT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<UserProviderData> Pack(flatbuffers::FlatBufferBuilder &_fbb, const UserProviderDataT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct UserProviderDataBuilder {
  typedef UserProviderData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uid(flatbuffers::Offset<flatbuffers::String> uid) {
    fbb_.AddOffset(UserProviderData::VT_UID, uid);
  }
  void add_email(flatbuffers::Offset<flatbuffers::String> email) {
    fbb_.AddOffset(UserProviderData::VT_EMAIL, email);
  }
  void add_display_name(flatbuffers::Offset<flatbuffers::String> display_name) {
    fbb_.AddOffset(UserProviderData::VT_DISPLAY_NAME, display_name);
  }
  void add_photo_url(flatbuffers::Offset<flatbuffers::String> photo_url) {
    fbb_.AddOffset(UserProviderData::VT_PHOTO_URL, photo_url);
  }
  void add_provider_id(flatbuffers::Offset<flatbuffers::String> provider_id) {
    fbb_.AddOffset(UserProviderData::VT_PROVIDER_ID, provider_id);
  }
  void add_phone_number(flatbuffers::Offset<flatbuffers::String> phone_number) {
    fbb_.AddOffset(UserProviderData::VT_PHONE_NUMBER, phone_number);
  }
  explicit UserProviderDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<UserProviderData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<UserProviderData>(end);
    return o;
  }
};

inline flatbuffers::Offset<UserProviderData> CreateUserProviderData(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> uid = 0,
    flatbuffers::Offset<flatbuffers::String> email = 0,
    flatbuffers::Offset<flatbuffers::String> display_name = 0,
    flatbuffers::Offset<flatbuffers::String> photo_url = 0,
    flatbuffers::Offset<flatbuffers::String> provider_id = 0,
    flatbuffers::Offset<flatbuffers::String> phone_number = 0) {
  UserProviderDataBuilder builder_(_fbb);
  builder_.add_phone_number(phone_number);
  builder_.add_provider_id(provider_id);
  builder_.add_photo_url(photo_url);
  builder_.add_display_name(display_name);
  builder_.add_email(email);
  builder_.add_uid(uid);
  return builder_.Finish();
}

inline flatbuffers::Offset<UserProviderData> CreateUserProviderDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *uid = nullptr,
    const char *email = nullptr,
    const char *display_name = nullptr,
    const char *photo_url = nullptr,
    const char *provider_id = nullptr,
    const char *phone_number = nullptr) {
  auto uid__ = uid ? _fbb.CreateString(uid) : 0;
  auto email__ = email ? _fbb.CreateString(email) : 0;
  auto display_name__ = display_name ? _fbb.CreateString(display_name) : 0;
  auto photo_url__ = photo_url ? _fbb.CreateString(photo_url) : 0;
  auto provider_id__ = provider_id ? _fbb.CreateString(provider_id) : 0;
  auto phone_number__ = phone_number ? _fbb.CreateString(phone_number) : 0;
  return firebase::auth::CreateUserProviderData(
      _fbb,
      uid__,
      email__,
      display_name__,
      photo_url__,
      provider_id__,
      phone_number__);
}

flatbuffers::Offset<UserProviderData> CreateUserProviderData(flatbuffers::FlatBufferBuilder &_fbb, const UserProviderDataT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct UserDataDesktopT : public flatbuffers::NativeTable {
  typedef UserDataDesktop TableType;
  std::string uid;
  std::string email;
  std::string display_name;
  std::string photo_url;
  std::string provider_id;
  std::string phone_number;
  bool is_anonymous;
  bool is_email_verified;
  std::string id_token;
  std::string refresh_token;
  std::string access_token;
  int64_t access_token_expiration_date;
  bool has_email_password_credential;
  uint64_t last_sign_in_timestamp;
  uint64_t creation_timestamp;
  std::vector<flatbuffers::unique_ptr<firebase::auth::UserProviderDataT>> provider_data;
  UserDataDesktopT()
      : is_anonymous(false),
        is_email_verified(false),
        access_token_expiration_date(0),
        has_email_password_credential(false),
        last_sign_in_timestamp(0),
        creation_timestamp(0) {
  }
};

struct UserDataDesktop FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef UserDataDesktopT NativeTableType;
  typedef UserDataDesktopBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UID = 4,
    VT_EMAIL = 6,
    VT_DISPLAY_NAME = 8,
    VT_PHOTO_URL = 10,
    VT_PROVIDER_ID = 12,
    VT_PHONE_NUMBER = 14,
    VT_IS_ANONYMOUS = 16,
    VT_IS_EMAIL_VERIFIED = 18,
    VT_ID_TOKEN = 20,
    VT_REFRESH_TOKEN = 22,
    VT_ACCESS_TOKEN = 24,
    VT_ACCESS_TOKEN_EXPIRATION_DATE = 26,
    VT_HAS_EMAIL_PASSWORD_CREDENTIAL = 28,
    VT_LAST_SIGN_IN_TIMESTAMP = 30,
    VT_CREATION_TIMESTAMP = 32,
    VT_PROVIDER_DATA = 34
  };
  const flatbuffers::String *uid() const {
    return GetPointer<const flatbuffers::String *>(VT_UID);
  }
  const flatbuffers::String *email() const {
    return GetPointer<const flatbuffers::String *>(VT_EMAIL);
  }
  const flatbuffers::String *display_name() const {
    return GetPointer<const flatbuffers::String *>(VT_DISPLAY_NAME);
  }
  const flatbuffers::String *photo_url() const {
    return GetPointer<const flatbuffers::String *>(VT_PHOTO_URL);
  }
  const flatbuffers::String *provider_id() const {
    return GetPointer<const flatbuffers::String *>(VT_PROVIDER_ID);
  }
  const flatbuffers::String *phone_number() const {
    return GetPointer<const flatbuffers::String *>(VT_PHONE_NUMBER);
  }
  bool is_anonymous() const {
    return GetField<uint8_t>(VT_IS_ANONYMOUS, 0) != 0;
  }
  bool is_email_verified() const {
    return GetField<uint8_t>(VT_IS_EMAIL_VERIFIED, 0) != 0;
  }
  const flatbuffers::String *id_token() const {
    return GetPointer<const flatbuffers::String *>(VT_ID_TOKEN);
  }
  const flatbuffers::String *refresh_token() const {
    return GetPointer<const flatbuffers::String *>(VT_REFRESH_TOKEN);
  }
  const flatbuffers::String *access_token() const {
    return GetPointer<const flatbuffers::String *>(VT_ACCESS_TOKEN);
  }
  int64_t access_token_expiration_date() const {
    return GetField<int64_t>(VT_ACCESS_TOKEN_EXPIRATION_DATE, 0);
  }
  bool has_email_password_credential() const {
    return GetField<uint8_t>(VT_HAS_EMAIL_PASSWORD_CREDENTIAL, 0) != 0;
  }
  uint64_t last_sign_in_timestamp() const {
    return GetField<uint64_t>(VT_LAST_SIGN_IN_TIMESTAMP, 0);
  }
  uint64_t creation_timestamp() const {
    return GetField<uint64_t>(VT_CREATION_TIMESTAMP, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<firebase::auth::UserProviderData>> *provider_data() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<firebase::auth::UserProviderData>> *>(VT_PROVIDER_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_UID) &&
           verifier.VerifyString(uid()) &&
           VerifyOffset(verifier, VT_EMAIL) &&
           verifier.VerifyString(email()) &&
           VerifyOffset(verifier, VT_DISPLAY_NAME) &&
           verifier.VerifyString(display_name()) &&
           VerifyOffset(verifier, VT_PHOTO_URL) &&
           verifier.VerifyString(photo_url()) &&
           VerifyOffset(verifier, VT_PROVIDER_ID) &&
           verifier.VerifyString(provider_id()) &&
           VerifyOffset(verifier, VT_PHONE_NUMBER) &&
           verifier.VerifyString(phone_number()) &&
           VerifyField<uint8_t>(verifier, VT_IS_ANONYMOUS) &&
           VerifyField<uint8_t>(verifier, VT_IS_EMAIL_VERIFIED) &&
           VerifyOffset(verifier, VT_ID_TOKEN) &&
           verifier.VerifyString(id_token()) &&
           VerifyOffset(verifier, VT_REFRESH_TOKEN) &&
           verifier.VerifyString(refresh_token()) &&
           VerifyOffset(verifier, VT_ACCESS_TOKEN) &&
           verifier.VerifyString(access_token()) &&
           VerifyField<int64_t>(verifier, VT_ACCESS_TOKEN_EXPIRATION_DATE) &&
           VerifyField<uint8_t>(verifier, VT_HAS_EMAIL_PASSWORD_CREDENTIAL) &&
           VerifyField<uint64_t>(verifier, VT_LAST_SIGN_IN_TIMESTAMP) &&
           VerifyField<uint64_t>(verifier, VT_CREATION_TIMESTAMP) &&
           VerifyOffset(verifier, VT_PROVIDER_DATA) &&
           verifier.VerifyVector(provider_data()) &&
           verifier.VerifyVectorOfTables(provider_data()) &&
           verifier.EndTable();
  }
  UserDataDesktopT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(UserDataDesktopT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<UserDataDesktop> Pack(flatbuffers::FlatBufferBuilder &_fbb, const UserDataDesktopT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct UserDataDesktopBuilder {
  typedef UserDataDesktop Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uid(flatbuffers::Offset<flatbuffers::String> uid) {
    fbb_.AddOffset(UserDataDesktop::VT_UID, uid);
  }
  void add_email(flatbuffers::Offset<flatbuffers::String> email) {
    fbb_.AddOffset(UserDataDesktop::VT_EMAIL, email);
  }
  void add_display_name(flatbuffers::Offset<flatbuffers::String> display_name) {
    fbb_.AddOffset(UserDataDesktop::VT_DISPLAY_NAME, display_name);
  }
  void add_photo_url(flatbuffers::Offset<flatbuffers::String> photo_url) {
    fbb_.AddOffset(UserDataDesktop::VT_PHOTO_URL, photo_url);
  }
  void add_provider_id(flatbuffers::Offset<flatbuffers::String> provider_id) {
    fbb_.AddOffset(UserDataDesktop::VT_PROVIDER_ID, provider_id);
  }
  void add_phone_number(flatbuffers::Offset<flatbuffers::String> phone_number) {
    fbb_.AddOffset(UserDataDesktop::VT_PHONE_NUMBER, phone_number);
  }
  void add_is_anonymous(bool is_anonymous) {
    fbb_.AddElement<uint8_t>(UserDataDesktop::VT_IS_ANONYMOUS, static_cast<uint8_t>(is_anonymous), 0);
  }
  void add_is_email_verified(bool is_email_verified) {
    fbb_.AddElement<uint8_t>(UserDataDesktop::VT_IS_EMAIL_VERIFIED, static_cast<uint8_t>(is_email_verified), 0);
  }
  void add_id_token(flatbuffers::Offset<flatbuffers::String> id_token) {
    fbb_.AddOffset(UserDataDesktop::VT_ID_TOKEN, id_token);
  }
  void add_refresh_token(flatbuffers::Offset<flatbuffers::String> refresh_token) {
    fbb_.AddOffset(UserDataDesktop::VT_REFRESH_TOKEN, refresh_token);
  }
  void add_access_token(flatbuffers::Offset<flatbuffers::String> access_token) {
    fbb_.AddOffset(UserDataDesktop::VT_ACCESS_TOKEN, access_token);
  }
  void add_access_token_expiration_date(int64_t access_token_expiration_date) {
    fbb_.AddElement<int64_t>(UserDataDesktop::VT_ACCESS_TOKEN_EXPIRATION_DATE, access_token_expiration_date, 0);
  }
  void add_has_email_password_credential(bool has_email_password_credential) {
    fbb_.AddElement<uint8_t>(UserDataDesktop::VT_HAS_EMAIL_PASSWORD_CREDENTIAL, static_cast<uint8_t>(has_email_password_credential), 0);
  }
  void add_last_sign_in_timestamp(uint64_t last_sign_in_timestamp) {
    fbb_.AddElement<uint64_t>(UserDataDesktop::VT_LAST_SIGN_IN_TIMESTAMP, last_sign_in_timestamp, 0);
  }
  void add_creation_timestamp(uint64_t creation_timestamp) {
    fbb_.AddElement<uint64_t>(UserDataDesktop::VT_CREATION_TIMESTAMP, creation_timestamp, 0);
  }
  void add_provider_data(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<firebase::auth::UserProviderData>>> provider_data) {
    fbb_.AddOffset(UserDataDesktop::VT_PROVIDER_DATA, provider_data);
  }
  explicit UserDataDesktopBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<UserDataDesktop> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<UserDataDesktop>(end);
    return o;
  }
};

inline flatbuffers::Offset<UserDataDesktop> CreateUserDataDesktop(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> uid = 0,
    flatbuffers::Offset<flatbuffers::String> email = 0,
    flatbuffers::Offset<flatbuffers::String> display_name = 0,
    flatbuffers::Offset<flatbuffers::String> photo_url = 0,
    flatbuffers::Offset<flatbuffers::String> provider_id = 0,
    flatbuffers::Offset<flatbuffers::String> phone_number = 0,
    bool is_anonymous = false,
    bool is_email_verified = false,
    flatbuffers::Offset<flatbuffers::String> id_token = 0,
    flatbuffers::Offset<flatbuffers::String> refresh_token = 0,
    flatbuffers::Offset<flatbuffers::String> access_token = 0,
    int64_t access_token_expiration_date = 0,
    bool has_email_password_credential = false,
    uint64_t last_sign_in_timestamp = 0,
    uint64_t creation_timestamp = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<firebase::auth::UserProviderData>>> provider_data = 0) {
  UserDataDesktopBuilder builder_(_fbb);
  builder_.add_creation_timestamp(creation_timestamp);
  builder_.add_last_sign_in_timestamp(last_sign_in_timestamp);
  builder_.add_access_token_expiration_date(access_token_expiration_date);
  builder_.add_provider_data(provider_data);
  builder_.add_access_token(access_token);
  builder_.add_refresh_token(refresh_token);
  builder_.add_id_token(id_token);
  builder_.add_phone_number(phone_number);
  builder_.add_provider_id(provider_id);
  builder_.add_photo_url(photo_url);
  builder_.add_display_name(display_name);
  builder_.add_email(email);
  builder_.add_uid(uid);
  builder_.add_has_email_password_credential(has_email_password_credential);
  builder_.add_is_email_verified(is_email_verified);
  builder_.add_is_anonymous(is_anonymous);
  return builder_.Finish();
}

inline flatbuffers::Offset<UserDataDesktop> CreateUserDataDesktopDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *uid = nullptr,
    const char *email = nullptr,
    const char *display_name = nullptr,
    const char *photo_url = nullptr,
    const char *provider_id = nullptr,
    const char *phone_number = nullptr,
    bool is_anonymous = false,
    bool is_email_verified = false,
    const char *id_token = nullptr,
    const char *refresh_token = nullptr,
    const char *access_token = nullptr,
    int64_t access_token_expiration_date = 0,
    bool has_email_password_credential = false,
    uint64_t last_sign_in_timestamp = 0,
    uint64_t creation_timestamp = 0,
    const std::vector<flatbuffers::Offset<firebase::auth::UserProviderData>> *provider_data = nullptr) {
  auto uid__ = uid ? _fbb.CreateString(uid) : 0;
  auto email__ = email ? _fbb.CreateString(email) : 0;
  auto display_name__ = display_name ? _fbb.CreateString(display_name) : 0;
  auto photo_url__ = photo_url ? _fbb.CreateString(photo_url) : 0;
  auto provider_id__ = provider_id ? _fbb.CreateString(provider_id) : 0;
  auto phone_number__ = phone_number ? _fbb.CreateString(phone_number) : 0;
  auto id_token__ = id_token ? _fbb.CreateString(id_token) : 0;
  auto refresh_token__ = refresh_token ? _fbb.CreateString(refresh_token) : 0;
  auto access_token__ = access_token ? _fbb.CreateString(access_token) : 0;
  auto provider_data__ = provider_data ? _fbb.CreateVector<flatbuffers::Offset<firebase::auth::UserProviderData>>(*provider_data) : 0;
  return firebase::auth::CreateUserDataDesktop(
      _fbb,
      uid__,
      email__,
      display_name__,
      photo_url__,
      provider_id__,
      phone_number__,
      is_anonymous,
      is_email_verified,
      id_token__,
      refresh_token__,
      access_token__,
      access_token_expiration_date,
      has_email_password_credential,
      last_sign_in_timestamp,
      creation_timestamp,
      provider_data__);
}

flatbuffers::Offset<UserDataDesktop> CreateUserDataDesktop(flatbuffers::FlatBufferBuilder &_fbb, const UserDataDesktopT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline UserProviderDataT *UserProviderData::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  flatbuffers::unique_ptr<firebase::auth::UserProviderDataT> _o = flatbuffers::unique_ptr<firebase::auth::UserProviderDataT>(new UserProviderDataT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void UserProviderData::UnPackTo(UserProviderDataT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = uid(); if (_e) _o->uid = _e->str(); }
  { auto _e = email(); if (_e) _o->email = _e->str(); }
  { auto _e = display_name(); if (_e) _o->display_name = _e->str(); }
  { auto _e = photo_url(); if (_e) _o->photo_url = _e->str(); }
  { auto _e = provider_id(); if (_e) _o->provider_id = _e->str(); }
  { auto _e = phone_number(); if (_e) _o->phone_number = _e->str(); }
}

inline flatbuffers::Offset<UserProviderData> UserProviderData::Pack(flatbuffers::FlatBufferBuilder &_fbb, const UserProviderDataT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateUserProviderData(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<UserProviderData> CreateUserProviderData(flatbuffers::FlatBufferBuilder &_fbb, const UserProviderDataT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const UserProviderDataT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _uid = _o->uid.empty() ? 0 : _fbb.CreateString(_o->uid);
  auto _email = _o->email.empty() ? 0 : _fbb.CreateString(_o->email);
  auto _display_name = _o->display_name.empty() ? 0 : _fbb.CreateString(_o->display_name);
  auto _photo_url = _o->photo_url.empty() ? 0 : _fbb.CreateString(_o->photo_url);
  auto _provider_id = _o->provider_id.empty() ? 0 : _fbb.CreateString(_o->provider_id);
  auto _phone_number = _o->phone_number.empty() ? 0 : _fbb.CreateString(_o->phone_number);
  return firebase::auth::CreateUserProviderData(
      _fbb,
      _uid,
      _email,
      _display_name,
      _photo_url,
      _provider_id,
      _phone_number);
}

inline UserDataDesktopT *UserDataDesktop::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  flatbuffers::unique_ptr<firebase::auth::UserDataDesktopT> _o = flatbuffers::unique_ptr<firebase::auth::UserDataDesktopT>(new UserDataDesktopT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void UserDataDesktop::UnPackTo(UserDataDesktopT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = uid(); if (_e) _o->uid = _e->str(); }
  { auto _e = email(); if (_e) _o->email = _e->str(); }
  { auto _e = display_name(); if (_e) _o->display_name = _e->str(); }
  { auto _e = photo_url(); if (_e) _o->photo_url = _e->str(); }
  { auto _e = provider_id(); if (_e) _o->provider_id = _e->str(); }
  { auto _e = phone_number(); if (_e) _o->phone_number = _e->str(); }
  { auto _e = is_anonymous(); _o->is_anonymous = _e; }
  { auto _e = is_email_verified(); _o->is_email_verified = _e; }
  { auto _e = id_token(); if (_e) _o->id_token = _e->str(); }
  { auto _e = refresh_token(); if (_e) _o->refresh_token = _e->str(); }
  { auto _e = access_token(); if (_e) _o->access_token = _e->str(); }
  { auto _e = access_token_expiration_date(); _o->access_token_expiration_date = _e; }
  { auto _e = has_email_password_credential(); _o->has_email_password_credential = _e; }
  { auto _e = last_sign_in_timestamp(); _o->last_sign_in_timestamp = _e; }
  { auto _e = creation_timestamp(); _o->creation_timestamp = _e; }
  { auto _e = provider_data(); if (_e) { _o->provider_data.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->provider_data[_i] = flatbuffers::unique_ptr<firebase::auth::UserProviderDataT>(_e->Get(_i)->UnPack(_resolver)); } } }
}

inline flatbuffers::Offset<UserDataDesktop> UserDataDesktop::Pack(flatbuffers::FlatBufferBuilder &_fbb, const UserDataDesktopT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateUserDataDesktop(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<UserDataDesktop> CreateUserDataDesktop(flatbuffers::FlatBufferBuilder &_fbb, const UserDataDesktopT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const UserDataDesktopT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _uid = _o->uid.empty() ? 0 : _fbb.CreateString(_o->uid);
  auto _email = _o->email.empty() ? 0 : _fbb.CreateString(_o->email);
  auto _display_name = _o->display_name.empty() ? 0 : _fbb.CreateString(_o->display_name);
  auto _photo_url = _o->photo_url.empty() ? 0 : _fbb.CreateString(_o->photo_url);
  auto _provider_id = _o->provider_id.empty() ? 0 : _fbb.CreateString(_o->provider_id);
  auto _phone_number = _o->phone_number.empty() ? 0 : _fbb.CreateString(_o->phone_number);
  auto _is_anonymous = _o->is_anonymous;
  auto _is_email_verified = _o->is_email_verified;
  auto _id_token = _o->id_token.empty() ? 0 : _fbb.CreateString(_o->id_token);
  auto _refresh_token = _o->refresh_token.empty() ? 0 : _fbb.CreateString(_o->refresh_token);
  auto _access_token = _o->access_token.empty() ? 0 : _fbb.CreateString(_o->access_token);
  auto _access_token_expiration_date = _o->access_token_expiration_date;
  auto _has_email_password_credential = _o->has_email_password_credential;
  auto _last_sign_in_timestamp = _o->last_sign_in_timestamp;
  auto _creation_timestamp = _o->creation_timestamp;
  auto _provider_data = _o->provider_data.size() ? _fbb.CreateVector<flatbuffers::Offset<firebase::auth::UserProviderData>> (_o->provider_data.size(), [](size_t i, _VectorArgs *__va) { return CreateUserProviderData(*__va->__fbb, __va->__o->provider_data[i].get(), __va->__rehasher); }, &_va ) : 0;
  return firebase::auth::CreateUserDataDesktop(
      _fbb,
      _uid,
      _email,
      _display_name,
      _photo_url,
      _provider_id,
      _phone_number,
      _is_anonymous,
      _is_email_verified,
      _id_token,
      _refresh_token,
      _access_token,
      _access_token_expiration_date,
      _has_email_password_credential,
      _last_sign_in_timestamp,
      _creation_timestamp,
      _provider_data);
}

inline const firebase::auth::UserDataDesktop *GetUserDataDesktop(const void *buf) {
  return flatbuffers::GetRoot<firebase::auth::UserDataDesktop>(buf);
}

inline const firebase::auth::UserDataDesktop *GetSizePrefixedUserDataDesktop(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<firebase::auth::UserDataDesktop>(buf);
}

inline bool VerifyUserDataDesktopBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<firebase::auth::UserDataDesktop>(nullptr);
}

inline bool VerifySizePrefixedUserDataDesktopBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<firebase::auth::UserDataDesktop>(nullptr);
}

inline void FinishUserDataDesktopBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<firebase::auth::UserDataDesktop> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedUserDataDesktopBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<firebase::auth::UserDataDesktop> root) {
  fbb.FinishSizePrefixed(root);
}

inline flatbuffers::unique_ptr<firebase::auth::UserDataDesktopT> UnPackUserDataDesktop(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return flatbuffers::unique_ptr<firebase::auth::UserDataDesktopT>(GetUserDataDesktop(buf)->UnPack(res));
}

inline flatbuffers::unique_ptr<firebase::auth::UserDataDesktopT> UnPackSizePrefixedUserDataDesktop(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return flatbuffers::unique_ptr<firebase::auth::UserDataDesktopT>(GetSizePrefixedUserDataDesktop(buf)->UnPack(res));
}

}  // namespace auth
}  // namespace firebase

#endif  // FLATBUFFERS_GENERATED_USERDATA_FIREBASE_AUTH_H_
