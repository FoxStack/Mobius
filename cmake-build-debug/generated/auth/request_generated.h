// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_REQUEST_FIREBASE_AUTH_FBS_H_
#define FLATBUFFERS_GENERATED_REQUEST_FIREBASE_AUTH_FBS_H_

#include "flatbuffers/flatbuffers.h"

namespace firebase {
namespace auth {
namespace fbs {

struct Request;
struct RequestBuilder;
struct RequestT;

struct RequestT : public flatbuffers::NativeTable {
  typedef Request TableType;
  std::string email;
  std::string password;
  std::string displayName;
  bool returnSecureToken;
  std::string identifier;
  std::string continueUri;
  std::string localId;
  std::string accessToken;
  std::string idToken;
  std::string requestUri;
  std::string postBody;
  std::string providerId;
  std::string oAuthSecret;
  std::string requestType;
  std::string oobCode;
  std::string newPassword;
  std::string appToken;
  bool isSandbox;
  std::string token;
  std::string grantType;
  std::string code;
  std::string refreshToken;
  std::string photoUrl;
  std::vector<std::string> deleteAttribute;
  std::vector<std::string> deleteProvider;
  std::string nonce;
  RequestT()
      : returnSecureToken(false),
        isSandbox(false) {
  }
};

struct Request FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RequestT NativeTableType;
  typedef RequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_EMAIL = 4,
    VT_PASSWORD = 6,
    VT_DISPLAYNAME = 8,
    VT_RETURNSECURETOKEN = 10,
    VT_IDENTIFIER = 12,
    VT_CONTINUEURI = 14,
    VT_LOCALID = 16,
    VT_ACCESSTOKEN = 18,
    VT_IDTOKEN = 20,
    VT_REQUESTURI = 22,
    VT_POSTBODY = 24,
    VT_PROVIDERID = 26,
    VT_OAUTHSECRET = 28,
    VT_REQUESTTYPE = 30,
    VT_OOBCODE = 32,
    VT_NEWPASSWORD = 34,
    VT_APPTOKEN = 36,
    VT_ISSANDBOX = 38,
    VT_TOKEN = 40,
    VT_GRANTTYPE = 42,
    VT_CODE = 44,
    VT_REFRESHTOKEN = 46,
    VT_PHOTOURL = 48,
    VT_DELETEATTRIBUTE = 50,
    VT_DELETEPROVIDER = 52,
    VT_NONCE = 54
  };
  const flatbuffers::String *email() const {
    return GetPointer<const flatbuffers::String *>(VT_EMAIL);
  }
  const flatbuffers::String *password() const {
    return GetPointer<const flatbuffers::String *>(VT_PASSWORD);
  }
  const flatbuffers::String *displayName() const {
    return GetPointer<const flatbuffers::String *>(VT_DISPLAYNAME);
  }
  bool returnSecureToken() const {
    return GetField<uint8_t>(VT_RETURNSECURETOKEN, 0) != 0;
  }
  const flatbuffers::String *identifier() const {
    return GetPointer<const flatbuffers::String *>(VT_IDENTIFIER);
  }
  const flatbuffers::String *continueUri() const {
    return GetPointer<const flatbuffers::String *>(VT_CONTINUEURI);
  }
  const flatbuffers::String *localId() const {
    return GetPointer<const flatbuffers::String *>(VT_LOCALID);
  }
  const flatbuffers::String *accessToken() const {
    return GetPointer<const flatbuffers::String *>(VT_ACCESSTOKEN);
  }
  const flatbuffers::String *idToken() const {
    return GetPointer<const flatbuffers::String *>(VT_IDTOKEN);
  }
  const flatbuffers::String *requestUri() const {
    return GetPointer<const flatbuffers::String *>(VT_REQUESTURI);
  }
  const flatbuffers::String *postBody() const {
    return GetPointer<const flatbuffers::String *>(VT_POSTBODY);
  }
  const flatbuffers::String *providerId() const {
    return GetPointer<const flatbuffers::String *>(VT_PROVIDERID);
  }
  const flatbuffers::String *oAuthSecret() const {
    return GetPointer<const flatbuffers::String *>(VT_OAUTHSECRET);
  }
  const flatbuffers::String *requestType() const {
    return GetPointer<const flatbuffers::String *>(VT_REQUESTTYPE);
  }
  const flatbuffers::String *oobCode() const {
    return GetPointer<const flatbuffers::String *>(VT_OOBCODE);
  }
  const flatbuffers::String *newPassword() const {
    return GetPointer<const flatbuffers::String *>(VT_NEWPASSWORD);
  }
  const flatbuffers::String *appToken() const {
    return GetPointer<const flatbuffers::String *>(VT_APPTOKEN);
  }
  bool isSandbox() const {
    return GetField<uint8_t>(VT_ISSANDBOX, 0) != 0;
  }
  const flatbuffers::String *token() const {
    return GetPointer<const flatbuffers::String *>(VT_TOKEN);
  }
  const flatbuffers::String *grantType() const {
    return GetPointer<const flatbuffers::String *>(VT_GRANTTYPE);
  }
  const flatbuffers::String *code() const {
    return GetPointer<const flatbuffers::String *>(VT_CODE);
  }
  const flatbuffers::String *refreshToken() const {
    return GetPointer<const flatbuffers::String *>(VT_REFRESHTOKEN);
  }
  const flatbuffers::String *photoUrl() const {
    return GetPointer<const flatbuffers::String *>(VT_PHOTOURL);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *deleteAttribute() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_DELETEATTRIBUTE);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *deleteProvider() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_DELETEPROVIDER);
  }
  const flatbuffers::String *nonce() const {
    return GetPointer<const flatbuffers::String *>(VT_NONCE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_EMAIL) &&
           verifier.VerifyString(email()) &&
           VerifyOffset(verifier, VT_PASSWORD) &&
           verifier.VerifyString(password()) &&
           VerifyOffset(verifier, VT_DISPLAYNAME) &&
           verifier.VerifyString(displayName()) &&
           VerifyField<uint8_t>(verifier, VT_RETURNSECURETOKEN) &&
           VerifyOffset(verifier, VT_IDENTIFIER) &&
           verifier.VerifyString(identifier()) &&
           VerifyOffset(verifier, VT_CONTINUEURI) &&
           verifier.VerifyString(continueUri()) &&
           VerifyOffset(verifier, VT_LOCALID) &&
           verifier.VerifyString(localId()) &&
           VerifyOffset(verifier, VT_ACCESSTOKEN) &&
           verifier.VerifyString(accessToken()) &&
           VerifyOffset(verifier, VT_IDTOKEN) &&
           verifier.VerifyString(idToken()) &&
           VerifyOffset(verifier, VT_REQUESTURI) &&
           verifier.VerifyString(requestUri()) &&
           VerifyOffset(verifier, VT_POSTBODY) &&
           verifier.VerifyString(postBody()) &&
           VerifyOffset(verifier, VT_PROVIDERID) &&
           verifier.VerifyString(providerId()) &&
           VerifyOffset(verifier, VT_OAUTHSECRET) &&
           verifier.VerifyString(oAuthSecret()) &&
           VerifyOffset(verifier, VT_REQUESTTYPE) &&
           verifier.VerifyString(requestType()) &&
           VerifyOffset(verifier, VT_OOBCODE) &&
           verifier.VerifyString(oobCode()) &&
           VerifyOffset(verifier, VT_NEWPASSWORD) &&
           verifier.VerifyString(newPassword()) &&
           VerifyOffset(verifier, VT_APPTOKEN) &&
           verifier.VerifyString(appToken()) &&
           VerifyField<uint8_t>(verifier, VT_ISSANDBOX) &&
           VerifyOffset(verifier, VT_TOKEN) &&
           verifier.VerifyString(token()) &&
           VerifyOffset(verifier, VT_GRANTTYPE) &&
           verifier.VerifyString(grantType()) &&
           VerifyOffset(verifier, VT_CODE) &&
           verifier.VerifyString(code()) &&
           VerifyOffset(verifier, VT_REFRESHTOKEN) &&
           verifier.VerifyString(refreshToken()) &&
           VerifyOffset(verifier, VT_PHOTOURL) &&
           verifier.VerifyString(photoUrl()) &&
           VerifyOffset(verifier, VT_DELETEATTRIBUTE) &&
           verifier.VerifyVector(deleteAttribute()) &&
           verifier.VerifyVectorOfStrings(deleteAttribute()) &&
           VerifyOffset(verifier, VT_DELETEPROVIDER) &&
           verifier.VerifyVector(deleteProvider()) &&
           verifier.VerifyVectorOfStrings(deleteProvider()) &&
           VerifyOffset(verifier, VT_NONCE) &&
           verifier.VerifyString(nonce()) &&
           verifier.EndTable();
  }
  RequestT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(RequestT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Request> Pack(flatbuffers::FlatBufferBuilder &_fbb, const RequestT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct RequestBuilder {
  typedef Request Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_email(flatbuffers::Offset<flatbuffers::String> email) {
    fbb_.AddOffset(Request::VT_EMAIL, email);
  }
  void add_password(flatbuffers::Offset<flatbuffers::String> password) {
    fbb_.AddOffset(Request::VT_PASSWORD, password);
  }
  void add_displayName(flatbuffers::Offset<flatbuffers::String> displayName) {
    fbb_.AddOffset(Request::VT_DISPLAYNAME, displayName);
  }
  void add_returnSecureToken(bool returnSecureToken) {
    fbb_.AddElement<uint8_t>(Request::VT_RETURNSECURETOKEN, static_cast<uint8_t>(returnSecureToken), 0);
  }
  void add_identifier(flatbuffers::Offset<flatbuffers::String> identifier) {
    fbb_.AddOffset(Request::VT_IDENTIFIER, identifier);
  }
  void add_continueUri(flatbuffers::Offset<flatbuffers::String> continueUri) {
    fbb_.AddOffset(Request::VT_CONTINUEURI, continueUri);
  }
  void add_localId(flatbuffers::Offset<flatbuffers::String> localId) {
    fbb_.AddOffset(Request::VT_LOCALID, localId);
  }
  void add_accessToken(flatbuffers::Offset<flatbuffers::String> accessToken) {
    fbb_.AddOffset(Request::VT_ACCESSTOKEN, accessToken);
  }
  void add_idToken(flatbuffers::Offset<flatbuffers::String> idToken) {
    fbb_.AddOffset(Request::VT_IDTOKEN, idToken);
  }
  void add_requestUri(flatbuffers::Offset<flatbuffers::String> requestUri) {
    fbb_.AddOffset(Request::VT_REQUESTURI, requestUri);
  }
  void add_postBody(flatbuffers::Offset<flatbuffers::String> postBody) {
    fbb_.AddOffset(Request::VT_POSTBODY, postBody);
  }
  void add_providerId(flatbuffers::Offset<flatbuffers::String> providerId) {
    fbb_.AddOffset(Request::VT_PROVIDERID, providerId);
  }
  void add_oAuthSecret(flatbuffers::Offset<flatbuffers::String> oAuthSecret) {
    fbb_.AddOffset(Request::VT_OAUTHSECRET, oAuthSecret);
  }
  void add_requestType(flatbuffers::Offset<flatbuffers::String> requestType) {
    fbb_.AddOffset(Request::VT_REQUESTTYPE, requestType);
  }
  void add_oobCode(flatbuffers::Offset<flatbuffers::String> oobCode) {
    fbb_.AddOffset(Request::VT_OOBCODE, oobCode);
  }
  void add_newPassword(flatbuffers::Offset<flatbuffers::String> newPassword) {
    fbb_.AddOffset(Request::VT_NEWPASSWORD, newPassword);
  }
  void add_appToken(flatbuffers::Offset<flatbuffers::String> appToken) {
    fbb_.AddOffset(Request::VT_APPTOKEN, appToken);
  }
  void add_isSandbox(bool isSandbox) {
    fbb_.AddElement<uint8_t>(Request::VT_ISSANDBOX, static_cast<uint8_t>(isSandbox), 0);
  }
  void add_token(flatbuffers::Offset<flatbuffers::String> token) {
    fbb_.AddOffset(Request::VT_TOKEN, token);
  }
  void add_grantType(flatbuffers::Offset<flatbuffers::String> grantType) {
    fbb_.AddOffset(Request::VT_GRANTTYPE, grantType);
  }
  void add_code(flatbuffers::Offset<flatbuffers::String> code) {
    fbb_.AddOffset(Request::VT_CODE, code);
  }
  void add_refreshToken(flatbuffers::Offset<flatbuffers::String> refreshToken) {
    fbb_.AddOffset(Request::VT_REFRESHTOKEN, refreshToken);
  }
  void add_photoUrl(flatbuffers::Offset<flatbuffers::String> photoUrl) {
    fbb_.AddOffset(Request::VT_PHOTOURL, photoUrl);
  }
  void add_deleteAttribute(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> deleteAttribute) {
    fbb_.AddOffset(Request::VT_DELETEATTRIBUTE, deleteAttribute);
  }
  void add_deleteProvider(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> deleteProvider) {
    fbb_.AddOffset(Request::VT_DELETEPROVIDER, deleteProvider);
  }
  void add_nonce(flatbuffers::Offset<flatbuffers::String> nonce) {
    fbb_.AddOffset(Request::VT_NONCE, nonce);
  }
  explicit RequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Request> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Request>(end);
    return o;
  }
};

inline flatbuffers::Offset<Request> CreateRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> email = 0,
    flatbuffers::Offset<flatbuffers::String> password = 0,
    flatbuffers::Offset<flatbuffers::String> displayName = 0,
    bool returnSecureToken = false,
    flatbuffers::Offset<flatbuffers::String> identifier = 0,
    flatbuffers::Offset<flatbuffers::String> continueUri = 0,
    flatbuffers::Offset<flatbuffers::String> localId = 0,
    flatbuffers::Offset<flatbuffers::String> accessToken = 0,
    flatbuffers::Offset<flatbuffers::String> idToken = 0,
    flatbuffers::Offset<flatbuffers::String> requestUri = 0,
    flatbuffers::Offset<flatbuffers::String> postBody = 0,
    flatbuffers::Offset<flatbuffers::String> providerId = 0,
    flatbuffers::Offset<flatbuffers::String> oAuthSecret = 0,
    flatbuffers::Offset<flatbuffers::String> requestType = 0,
    flatbuffers::Offset<flatbuffers::String> oobCode = 0,
    flatbuffers::Offset<flatbuffers::String> newPassword = 0,
    flatbuffers::Offset<flatbuffers::String> appToken = 0,
    bool isSandbox = false,
    flatbuffers::Offset<flatbuffers::String> token = 0,
    flatbuffers::Offset<flatbuffers::String> grantType = 0,
    flatbuffers::Offset<flatbuffers::String> code = 0,
    flatbuffers::Offset<flatbuffers::String> refreshToken = 0,
    flatbuffers::Offset<flatbuffers::String> photoUrl = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> deleteAttribute = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> deleteProvider = 0,
    flatbuffers::Offset<flatbuffers::String> nonce = 0) {
  RequestBuilder builder_(_fbb);
  builder_.add_nonce(nonce);
  builder_.add_deleteProvider(deleteProvider);
  builder_.add_deleteAttribute(deleteAttribute);
  builder_.add_photoUrl(photoUrl);
  builder_.add_refreshToken(refreshToken);
  builder_.add_code(code);
  builder_.add_grantType(grantType);
  builder_.add_token(token);
  builder_.add_appToken(appToken);
  builder_.add_newPassword(newPassword);
  builder_.add_oobCode(oobCode);
  builder_.add_requestType(requestType);
  builder_.add_oAuthSecret(oAuthSecret);
  builder_.add_providerId(providerId);
  builder_.add_postBody(postBody);
  builder_.add_requestUri(requestUri);
  builder_.add_idToken(idToken);
  builder_.add_accessToken(accessToken);
  builder_.add_localId(localId);
  builder_.add_continueUri(continueUri);
  builder_.add_identifier(identifier);
  builder_.add_displayName(displayName);
  builder_.add_password(password);
  builder_.add_email(email);
  builder_.add_isSandbox(isSandbox);
  builder_.add_returnSecureToken(returnSecureToken);
  return builder_.Finish();
}

inline flatbuffers::Offset<Request> CreateRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *email = nullptr,
    const char *password = nullptr,
    const char *displayName = nullptr,
    bool returnSecureToken = false,
    const char *identifier = nullptr,
    const char *continueUri = nullptr,
    const char *localId = nullptr,
    const char *accessToken = nullptr,
    const char *idToken = nullptr,
    const char *requestUri = nullptr,
    const char *postBody = nullptr,
    const char *providerId = nullptr,
    const char *oAuthSecret = nullptr,
    const char *requestType = nullptr,
    const char *oobCode = nullptr,
    const char *newPassword = nullptr,
    const char *appToken = nullptr,
    bool isSandbox = false,
    const char *token = nullptr,
    const char *grantType = nullptr,
    const char *code = nullptr,
    const char *refreshToken = nullptr,
    const char *photoUrl = nullptr,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *deleteAttribute = nullptr,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *deleteProvider = nullptr,
    const char *nonce = nullptr) {
  auto email__ = email ? _fbb.CreateString(email) : 0;
  auto password__ = password ? _fbb.CreateString(password) : 0;
  auto displayName__ = displayName ? _fbb.CreateString(displayName) : 0;
  auto identifier__ = identifier ? _fbb.CreateString(identifier) : 0;
  auto continueUri__ = continueUri ? _fbb.CreateString(continueUri) : 0;
  auto localId__ = localId ? _fbb.CreateString(localId) : 0;
  auto accessToken__ = accessToken ? _fbb.CreateString(accessToken) : 0;
  auto idToken__ = idToken ? _fbb.CreateString(idToken) : 0;
  auto requestUri__ = requestUri ? _fbb.CreateString(requestUri) : 0;
  auto postBody__ = postBody ? _fbb.CreateString(postBody) : 0;
  auto providerId__ = providerId ? _fbb.CreateString(providerId) : 0;
  auto oAuthSecret__ = oAuthSecret ? _fbb.CreateString(oAuthSecret) : 0;
  auto requestType__ = requestType ? _fbb.CreateString(requestType) : 0;
  auto oobCode__ = oobCode ? _fbb.CreateString(oobCode) : 0;
  auto newPassword__ = newPassword ? _fbb.CreateString(newPassword) : 0;
  auto appToken__ = appToken ? _fbb.CreateString(appToken) : 0;
  auto token__ = token ? _fbb.CreateString(token) : 0;
  auto grantType__ = grantType ? _fbb.CreateString(grantType) : 0;
  auto code__ = code ? _fbb.CreateString(code) : 0;
  auto refreshToken__ = refreshToken ? _fbb.CreateString(refreshToken) : 0;
  auto photoUrl__ = photoUrl ? _fbb.CreateString(photoUrl) : 0;
  auto deleteAttribute__ = deleteAttribute ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*deleteAttribute) : 0;
  auto deleteProvider__ = deleteProvider ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*deleteProvider) : 0;
  auto nonce__ = nonce ? _fbb.CreateString(nonce) : 0;
  return firebase::auth::fbs::CreateRequest(
      _fbb,
      email__,
      password__,
      displayName__,
      returnSecureToken,
      identifier__,
      continueUri__,
      localId__,
      accessToken__,
      idToken__,
      requestUri__,
      postBody__,
      providerId__,
      oAuthSecret__,
      requestType__,
      oobCode__,
      newPassword__,
      appToken__,
      isSandbox,
      token__,
      grantType__,
      code__,
      refreshToken__,
      photoUrl__,
      deleteAttribute__,
      deleteProvider__,
      nonce__);
}

flatbuffers::Offset<Request> CreateRequest(flatbuffers::FlatBufferBuilder &_fbb, const RequestT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline RequestT *Request::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  flatbuffers::unique_ptr<firebase::auth::fbs::RequestT> _o = flatbuffers::unique_ptr<firebase::auth::fbs::RequestT>(new RequestT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Request::UnPackTo(RequestT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = email(); if (_e) _o->email = _e->str(); }
  { auto _e = password(); if (_e) _o->password = _e->str(); }
  { auto _e = displayName(); if (_e) _o->displayName = _e->str(); }
  { auto _e = returnSecureToken(); _o->returnSecureToken = _e; }
  { auto _e = identifier(); if (_e) _o->identifier = _e->str(); }
  { auto _e = continueUri(); if (_e) _o->continueUri = _e->str(); }
  { auto _e = localId(); if (_e) _o->localId = _e->str(); }
  { auto _e = accessToken(); if (_e) _o->accessToken = _e->str(); }
  { auto _e = idToken(); if (_e) _o->idToken = _e->str(); }
  { auto _e = requestUri(); if (_e) _o->requestUri = _e->str(); }
  { auto _e = postBody(); if (_e) _o->postBody = _e->str(); }
  { auto _e = providerId(); if (_e) _o->providerId = _e->str(); }
  { auto _e = oAuthSecret(); if (_e) _o->oAuthSecret = _e->str(); }
  { auto _e = requestType(); if (_e) _o->requestType = _e->str(); }
  { auto _e = oobCode(); if (_e) _o->oobCode = _e->str(); }
  { auto _e = newPassword(); if (_e) _o->newPassword = _e->str(); }
  { auto _e = appToken(); if (_e) _o->appToken = _e->str(); }
  { auto _e = isSandbox(); _o->isSandbox = _e; }
  { auto _e = token(); if (_e) _o->token = _e->str(); }
  { auto _e = grantType(); if (_e) _o->grantType = _e->str(); }
  { auto _e = code(); if (_e) _o->code = _e->str(); }
  { auto _e = refreshToken(); if (_e) _o->refreshToken = _e->str(); }
  { auto _e = photoUrl(); if (_e) _o->photoUrl = _e->str(); }
  { auto _e = deleteAttribute(); if (_e) { _o->deleteAttribute.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->deleteAttribute[_i] = _e->Get(_i)->str(); } } }
  { auto _e = deleteProvider(); if (_e) { _o->deleteProvider.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->deleteProvider[_i] = _e->Get(_i)->str(); } } }
  { auto _e = nonce(); if (_e) _o->nonce = _e->str(); }
}

inline flatbuffers::Offset<Request> Request::Pack(flatbuffers::FlatBufferBuilder &_fbb, const RequestT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateRequest(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Request> CreateRequest(flatbuffers::FlatBufferBuilder &_fbb, const RequestT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const RequestT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _email = _o->email.empty() ? 0 : _fbb.CreateString(_o->email);
  auto _password = _o->password.empty() ? 0 : _fbb.CreateString(_o->password);
  auto _displayName = _o->displayName.empty() ? 0 : _fbb.CreateString(_o->displayName);
  auto _returnSecureToken = _o->returnSecureToken;
  auto _identifier = _o->identifier.empty() ? 0 : _fbb.CreateString(_o->identifier);
  auto _continueUri = _o->continueUri.empty() ? 0 : _fbb.CreateString(_o->continueUri);
  auto _localId = _o->localId.empty() ? 0 : _fbb.CreateString(_o->localId);
  auto _accessToken = _o->accessToken.empty() ? 0 : _fbb.CreateString(_o->accessToken);
  auto _idToken = _o->idToken.empty() ? 0 : _fbb.CreateString(_o->idToken);
  auto _requestUri = _o->requestUri.empty() ? 0 : _fbb.CreateString(_o->requestUri);
  auto _postBody = _o->postBody.empty() ? 0 : _fbb.CreateString(_o->postBody);
  auto _providerId = _o->providerId.empty() ? 0 : _fbb.CreateString(_o->providerId);
  auto _oAuthSecret = _o->oAuthSecret.empty() ? 0 : _fbb.CreateString(_o->oAuthSecret);
  auto _requestType = _o->requestType.empty() ? 0 : _fbb.CreateString(_o->requestType);
  auto _oobCode = _o->oobCode.empty() ? 0 : _fbb.CreateString(_o->oobCode);
  auto _newPassword = _o->newPassword.empty() ? 0 : _fbb.CreateString(_o->newPassword);
  auto _appToken = _o->appToken.empty() ? 0 : _fbb.CreateString(_o->appToken);
  auto _isSandbox = _o->isSandbox;
  auto _token = _o->token.empty() ? 0 : _fbb.CreateString(_o->token);
  auto _grantType = _o->grantType.empty() ? 0 : _fbb.CreateString(_o->grantType);
  auto _code = _o->code.empty() ? 0 : _fbb.CreateString(_o->code);
  auto _refreshToken = _o->refreshToken.empty() ? 0 : _fbb.CreateString(_o->refreshToken);
  auto _photoUrl = _o->photoUrl.empty() ? 0 : _fbb.CreateString(_o->photoUrl);
  auto _deleteAttribute = _o->deleteAttribute.size() ? _fbb.CreateVectorOfStrings(_o->deleteAttribute) : 0;
  auto _deleteProvider = _o->deleteProvider.size() ? _fbb.CreateVectorOfStrings(_o->deleteProvider) : 0;
  auto _nonce = _o->nonce.empty() ? 0 : _fbb.CreateString(_o->nonce);
  return firebase::auth::fbs::CreateRequest(
      _fbb,
      _email,
      _password,
      _displayName,
      _returnSecureToken,
      _identifier,
      _continueUri,
      _localId,
      _accessToken,
      _idToken,
      _requestUri,
      _postBody,
      _providerId,
      _oAuthSecret,
      _requestType,
      _oobCode,
      _newPassword,
      _appToken,
      _isSandbox,
      _token,
      _grantType,
      _code,
      _refreshToken,
      _photoUrl,
      _deleteAttribute,
      _deleteProvider,
      _nonce);
}

inline const firebase::auth::fbs::Request *GetRequest(const void *buf) {
  return flatbuffers::GetRoot<firebase::auth::fbs::Request>(buf);
}

inline const firebase::auth::fbs::Request *GetSizePrefixedRequest(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<firebase::auth::fbs::Request>(buf);
}

inline bool VerifyRequestBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<firebase::auth::fbs::Request>(nullptr);
}

inline bool VerifySizePrefixedRequestBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<firebase::auth::fbs::Request>(nullptr);
}

inline void FinishRequestBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<firebase::auth::fbs::Request> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedRequestBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<firebase::auth::fbs::Request> root) {
  fbb.FinishSizePrefixed(root);
}

inline flatbuffers::unique_ptr<firebase::auth::fbs::RequestT> UnPackRequest(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return flatbuffers::unique_ptr<firebase::auth::fbs::RequestT>(GetRequest(buf)->UnPack(res));
}

inline flatbuffers::unique_ptr<firebase::auth::fbs::RequestT> UnPackSizePrefixedRequest(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return flatbuffers::unique_ptr<firebase::auth::fbs::RequestT>(GetSizePrefixedRequest(buf)->UnPack(res));
}

}  // namespace fbs
}  // namespace auth
}  // namespace firebase

#endif  // FLATBUFFERS_GENERATED_REQUEST_FIREBASE_AUTH_FBS_H_
