// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_RESPONSE_FIREBASE_AUTH_FBS_H_
#define FLATBUFFERS_GENERATED_RESPONSE_FIREBASE_AUTH_FBS_H_

#include "flatbuffers/flatbuffers.h"

namespace firebase {
namespace auth {
namespace fbs {

struct ProviderUserInfo;
struct ProviderUserInfoBuilder;
struct ProviderUserInfoT;

struct User;
struct UserBuilder;
struct UserT;

struct ErrorDetails;
struct ErrorDetailsBuilder;
struct ErrorDetailsT;

struct Error;
struct ErrorBuilder;
struct ErrorT;

struct Response;
struct ResponseBuilder;
struct ResponseT;

struct ProviderUserInfoT : public flatbuffers::NativeTable {
  typedef ProviderUserInfo TableType;
  std::string providerId;
  std::string displayName;
  std::string photoUrl;
  std::string federatedId;
  std::string email;
  std::string phoneNumber;
  ProviderUserInfoT() {
  }
};

struct ProviderUserInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ProviderUserInfoT NativeTableType;
  typedef ProviderUserInfoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PROVIDERID = 4,
    VT_DISPLAYNAME = 6,
    VT_PHOTOURL = 8,
    VT_FEDERATEDID = 10,
    VT_EMAIL = 12,
    VT_PHONENUMBER = 14
  };
  const flatbuffers::String *providerId() const {
    return GetPointer<const flatbuffers::String *>(VT_PROVIDERID);
  }
  const flatbuffers::String *displayName() const {
    return GetPointer<const flatbuffers::String *>(VT_DISPLAYNAME);
  }
  const flatbuffers::String *photoUrl() const {
    return GetPointer<const flatbuffers::String *>(VT_PHOTOURL);
  }
  const flatbuffers::String *federatedId() const {
    return GetPointer<const flatbuffers::String *>(VT_FEDERATEDID);
  }
  const flatbuffers::String *email() const {
    return GetPointer<const flatbuffers::String *>(VT_EMAIL);
  }
  const flatbuffers::String *phoneNumber() const {
    return GetPointer<const flatbuffers::String *>(VT_PHONENUMBER);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PROVIDERID) &&
           verifier.VerifyString(providerId()) &&
           VerifyOffset(verifier, VT_DISPLAYNAME) &&
           verifier.VerifyString(displayName()) &&
           VerifyOffset(verifier, VT_PHOTOURL) &&
           verifier.VerifyString(photoUrl()) &&
           VerifyOffset(verifier, VT_FEDERATEDID) &&
           verifier.VerifyString(federatedId()) &&
           VerifyOffset(verifier, VT_EMAIL) &&
           verifier.VerifyString(email()) &&
           VerifyOffset(verifier, VT_PHONENUMBER) &&
           verifier.VerifyString(phoneNumber()) &&
           verifier.EndTable();
  }
  ProviderUserInfoT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ProviderUserInfoT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<ProviderUserInfo> Pack(flatbuffers::FlatBufferBuilder &_fbb, const ProviderUserInfoT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ProviderUserInfoBuilder {
  typedef ProviderUserInfo Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_providerId(flatbuffers::Offset<flatbuffers::String> providerId) {
    fbb_.AddOffset(ProviderUserInfo::VT_PROVIDERID, providerId);
  }
  void add_displayName(flatbuffers::Offset<flatbuffers::String> displayName) {
    fbb_.AddOffset(ProviderUserInfo::VT_DISPLAYNAME, displayName);
  }
  void add_photoUrl(flatbuffers::Offset<flatbuffers::String> photoUrl) {
    fbb_.AddOffset(ProviderUserInfo::VT_PHOTOURL, photoUrl);
  }
  void add_federatedId(flatbuffers::Offset<flatbuffers::String> federatedId) {
    fbb_.AddOffset(ProviderUserInfo::VT_FEDERATEDID, federatedId);
  }
  void add_email(flatbuffers::Offset<flatbuffers::String> email) {
    fbb_.AddOffset(ProviderUserInfo::VT_EMAIL, email);
  }
  void add_phoneNumber(flatbuffers::Offset<flatbuffers::String> phoneNumber) {
    fbb_.AddOffset(ProviderUserInfo::VT_PHONENUMBER, phoneNumber);
  }
  explicit ProviderUserInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ProviderUserInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ProviderUserInfo>(end);
    return o;
  }
};

inline flatbuffers::Offset<ProviderUserInfo> CreateProviderUserInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> providerId = 0,
    flatbuffers::Offset<flatbuffers::String> displayName = 0,
    flatbuffers::Offset<flatbuffers::String> photoUrl = 0,
    flatbuffers::Offset<flatbuffers::String> federatedId = 0,
    flatbuffers::Offset<flatbuffers::String> email = 0,
    flatbuffers::Offset<flatbuffers::String> phoneNumber = 0) {
  ProviderUserInfoBuilder builder_(_fbb);
  builder_.add_phoneNumber(phoneNumber);
  builder_.add_email(email);
  builder_.add_federatedId(federatedId);
  builder_.add_photoUrl(photoUrl);
  builder_.add_displayName(displayName);
  builder_.add_providerId(providerId);
  return builder_.Finish();
}

inline flatbuffers::Offset<ProviderUserInfo> CreateProviderUserInfoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *providerId = nullptr,
    const char *displayName = nullptr,
    const char *photoUrl = nullptr,
    const char *federatedId = nullptr,
    const char *email = nullptr,
    const char *phoneNumber = nullptr) {
  auto providerId__ = providerId ? _fbb.CreateString(providerId) : 0;
  auto displayName__ = displayName ? _fbb.CreateString(displayName) : 0;
  auto photoUrl__ = photoUrl ? _fbb.CreateString(photoUrl) : 0;
  auto federatedId__ = federatedId ? _fbb.CreateString(federatedId) : 0;
  auto email__ = email ? _fbb.CreateString(email) : 0;
  auto phoneNumber__ = phoneNumber ? _fbb.CreateString(phoneNumber) : 0;
  return firebase::auth::fbs::CreateProviderUserInfo(
      _fbb,
      providerId__,
      displayName__,
      photoUrl__,
      federatedId__,
      email__,
      phoneNumber__);
}

flatbuffers::Offset<ProviderUserInfo> CreateProviderUserInfo(flatbuffers::FlatBufferBuilder &_fbb, const ProviderUserInfoT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct UserT : public flatbuffers::NativeTable {
  typedef User TableType;
  std::string localId;
  std::string displayName;
  std::string email;
  std::string photoUrl;
  bool emailVerified;
  std::string passwordHash;
  std::string phoneNumber;
  double passwordUpdatedAt;
  int64_t validSince;
  int64_t lastLoginAt;
  int64_t createdAt;
  std::vector<flatbuffers::unique_ptr<firebase::auth::fbs::ProviderUserInfoT>> providerUserInfo;
  UserT()
      : emailVerified(false),
        passwordUpdatedAt(0.0),
        validSince(0),
        lastLoginAt(0),
        createdAt(0) {
  }
};

struct User FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef UserT NativeTableType;
  typedef UserBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LOCALID = 4,
    VT_DISPLAYNAME = 6,
    VT_EMAIL = 8,
    VT_PHOTOURL = 10,
    VT_EMAILVERIFIED = 12,
    VT_PASSWORDHASH = 14,
    VT_PHONENUMBER = 16,
    VT_PASSWORDUPDATEDAT = 18,
    VT_VALIDSINCE = 20,
    VT_LASTLOGINAT = 22,
    VT_CREATEDAT = 24,
    VT_PROVIDERUSERINFO = 26
  };
  const flatbuffers::String *localId() const {
    return GetPointer<const flatbuffers::String *>(VT_LOCALID);
  }
  const flatbuffers::String *displayName() const {
    return GetPointer<const flatbuffers::String *>(VT_DISPLAYNAME);
  }
  const flatbuffers::String *email() const {
    return GetPointer<const flatbuffers::String *>(VT_EMAIL);
  }
  const flatbuffers::String *photoUrl() const {
    return GetPointer<const flatbuffers::String *>(VT_PHOTOURL);
  }
  bool emailVerified() const {
    return GetField<uint8_t>(VT_EMAILVERIFIED, 0) != 0;
  }
  const flatbuffers::String *passwordHash() const {
    return GetPointer<const flatbuffers::String *>(VT_PASSWORDHASH);
  }
  const flatbuffers::String *phoneNumber() const {
    return GetPointer<const flatbuffers::String *>(VT_PHONENUMBER);
  }
  double passwordUpdatedAt() const {
    return GetField<double>(VT_PASSWORDUPDATEDAT, 0.0);
  }
  int64_t validSince() const {
    return GetField<int64_t>(VT_VALIDSINCE, 0);
  }
  int64_t lastLoginAt() const {
    return GetField<int64_t>(VT_LASTLOGINAT, 0);
  }
  int64_t createdAt() const {
    return GetField<int64_t>(VT_CREATEDAT, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<firebase::auth::fbs::ProviderUserInfo>> *providerUserInfo() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<firebase::auth::fbs::ProviderUserInfo>> *>(VT_PROVIDERUSERINFO);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_LOCALID) &&
           verifier.VerifyString(localId()) &&
           VerifyOffset(verifier, VT_DISPLAYNAME) &&
           verifier.VerifyString(displayName()) &&
           VerifyOffset(verifier, VT_EMAIL) &&
           verifier.VerifyString(email()) &&
           VerifyOffset(verifier, VT_PHOTOURL) &&
           verifier.VerifyString(photoUrl()) &&
           VerifyField<uint8_t>(verifier, VT_EMAILVERIFIED) &&
           VerifyOffset(verifier, VT_PASSWORDHASH) &&
           verifier.VerifyString(passwordHash()) &&
           VerifyOffset(verifier, VT_PHONENUMBER) &&
           verifier.VerifyString(phoneNumber()) &&
           VerifyField<double>(verifier, VT_PASSWORDUPDATEDAT) &&
           VerifyField<int64_t>(verifier, VT_VALIDSINCE) &&
           VerifyField<int64_t>(verifier, VT_LASTLOGINAT) &&
           VerifyField<int64_t>(verifier, VT_CREATEDAT) &&
           VerifyOffset(verifier, VT_PROVIDERUSERINFO) &&
           verifier.VerifyVector(providerUserInfo()) &&
           verifier.VerifyVectorOfTables(providerUserInfo()) &&
           verifier.EndTable();
  }
  UserT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(UserT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<User> Pack(flatbuffers::FlatBufferBuilder &_fbb, const UserT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct UserBuilder {
  typedef User Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_localId(flatbuffers::Offset<flatbuffers::String> localId) {
    fbb_.AddOffset(User::VT_LOCALID, localId);
  }
  void add_displayName(flatbuffers::Offset<flatbuffers::String> displayName) {
    fbb_.AddOffset(User::VT_DISPLAYNAME, displayName);
  }
  void add_email(flatbuffers::Offset<flatbuffers::String> email) {
    fbb_.AddOffset(User::VT_EMAIL, email);
  }
  void add_photoUrl(flatbuffers::Offset<flatbuffers::String> photoUrl) {
    fbb_.AddOffset(User::VT_PHOTOURL, photoUrl);
  }
  void add_emailVerified(bool emailVerified) {
    fbb_.AddElement<uint8_t>(User::VT_EMAILVERIFIED, static_cast<uint8_t>(emailVerified), 0);
  }
  void add_passwordHash(flatbuffers::Offset<flatbuffers::String> passwordHash) {
    fbb_.AddOffset(User::VT_PASSWORDHASH, passwordHash);
  }
  void add_phoneNumber(flatbuffers::Offset<flatbuffers::String> phoneNumber) {
    fbb_.AddOffset(User::VT_PHONENUMBER, phoneNumber);
  }
  void add_passwordUpdatedAt(double passwordUpdatedAt) {
    fbb_.AddElement<double>(User::VT_PASSWORDUPDATEDAT, passwordUpdatedAt, 0.0);
  }
  void add_validSince(int64_t validSince) {
    fbb_.AddElement<int64_t>(User::VT_VALIDSINCE, validSince, 0);
  }
  void add_lastLoginAt(int64_t lastLoginAt) {
    fbb_.AddElement<int64_t>(User::VT_LASTLOGINAT, lastLoginAt, 0);
  }
  void add_createdAt(int64_t createdAt) {
    fbb_.AddElement<int64_t>(User::VT_CREATEDAT, createdAt, 0);
  }
  void add_providerUserInfo(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<firebase::auth::fbs::ProviderUserInfo>>> providerUserInfo) {
    fbb_.AddOffset(User::VT_PROVIDERUSERINFO, providerUserInfo);
  }
  explicit UserBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<User> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<User>(end);
    return o;
  }
};

inline flatbuffers::Offset<User> CreateUser(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> localId = 0,
    flatbuffers::Offset<flatbuffers::String> displayName = 0,
    flatbuffers::Offset<flatbuffers::String> email = 0,
    flatbuffers::Offset<flatbuffers::String> photoUrl = 0,
    bool emailVerified = false,
    flatbuffers::Offset<flatbuffers::String> passwordHash = 0,
    flatbuffers::Offset<flatbuffers::String> phoneNumber = 0,
    double passwordUpdatedAt = 0.0,
    int64_t validSince = 0,
    int64_t lastLoginAt = 0,
    int64_t createdAt = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<firebase::auth::fbs::ProviderUserInfo>>> providerUserInfo = 0) {
  UserBuilder builder_(_fbb);
  builder_.add_createdAt(createdAt);
  builder_.add_lastLoginAt(lastLoginAt);
  builder_.add_validSince(validSince);
  builder_.add_passwordUpdatedAt(passwordUpdatedAt);
  builder_.add_providerUserInfo(providerUserInfo);
  builder_.add_phoneNumber(phoneNumber);
  builder_.add_passwordHash(passwordHash);
  builder_.add_photoUrl(photoUrl);
  builder_.add_email(email);
  builder_.add_displayName(displayName);
  builder_.add_localId(localId);
  builder_.add_emailVerified(emailVerified);
  return builder_.Finish();
}

inline flatbuffers::Offset<User> CreateUserDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *localId = nullptr,
    const char *displayName = nullptr,
    const char *email = nullptr,
    const char *photoUrl = nullptr,
    bool emailVerified = false,
    const char *passwordHash = nullptr,
    const char *phoneNumber = nullptr,
    double passwordUpdatedAt = 0.0,
    int64_t validSince = 0,
    int64_t lastLoginAt = 0,
    int64_t createdAt = 0,
    const std::vector<flatbuffers::Offset<firebase::auth::fbs::ProviderUserInfo>> *providerUserInfo = nullptr) {
  auto localId__ = localId ? _fbb.CreateString(localId) : 0;
  auto displayName__ = displayName ? _fbb.CreateString(displayName) : 0;
  auto email__ = email ? _fbb.CreateString(email) : 0;
  auto photoUrl__ = photoUrl ? _fbb.CreateString(photoUrl) : 0;
  auto passwordHash__ = passwordHash ? _fbb.CreateString(passwordHash) : 0;
  auto phoneNumber__ = phoneNumber ? _fbb.CreateString(phoneNumber) : 0;
  auto providerUserInfo__ = providerUserInfo ? _fbb.CreateVector<flatbuffers::Offset<firebase::auth::fbs::ProviderUserInfo>>(*providerUserInfo) : 0;
  return firebase::auth::fbs::CreateUser(
      _fbb,
      localId__,
      displayName__,
      email__,
      photoUrl__,
      emailVerified,
      passwordHash__,
      phoneNumber__,
      passwordUpdatedAt,
      validSince,
      lastLoginAt,
      createdAt,
      providerUserInfo__);
}

flatbuffers::Offset<User> CreateUser(flatbuffers::FlatBufferBuilder &_fbb, const UserT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct ErrorDetailsT : public flatbuffers::NativeTable {
  typedef ErrorDetails TableType;
  std::string reason;
  ErrorDetailsT() {
  }
};

struct ErrorDetails FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ErrorDetailsT NativeTableType;
  typedef ErrorDetailsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_REASON = 4
  };
  const flatbuffers::String *reason() const {
    return GetPointer<const flatbuffers::String *>(VT_REASON);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_REASON) &&
           verifier.VerifyString(reason()) &&
           verifier.EndTable();
  }
  ErrorDetailsT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ErrorDetailsT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<ErrorDetails> Pack(flatbuffers::FlatBufferBuilder &_fbb, const ErrorDetailsT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ErrorDetailsBuilder {
  typedef ErrorDetails Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_reason(flatbuffers::Offset<flatbuffers::String> reason) {
    fbb_.AddOffset(ErrorDetails::VT_REASON, reason);
  }
  explicit ErrorDetailsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ErrorDetails> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ErrorDetails>(end);
    return o;
  }
};

inline flatbuffers::Offset<ErrorDetails> CreateErrorDetails(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> reason = 0) {
  ErrorDetailsBuilder builder_(_fbb);
  builder_.add_reason(reason);
  return builder_.Finish();
}

inline flatbuffers::Offset<ErrorDetails> CreateErrorDetailsDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *reason = nullptr) {
  auto reason__ = reason ? _fbb.CreateString(reason) : 0;
  return firebase::auth::fbs::CreateErrorDetails(
      _fbb,
      reason__);
}

flatbuffers::Offset<ErrorDetails> CreateErrorDetails(flatbuffers::FlatBufferBuilder &_fbb, const ErrorDetailsT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct ErrorT : public flatbuffers::NativeTable {
  typedef Error TableType;
  int64_t code;
  std::string message;
  std::vector<flatbuffers::unique_ptr<firebase::auth::fbs::ErrorDetailsT>> errors;
  ErrorT()
      : code(0) {
  }
};

struct Error FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ErrorT NativeTableType;
  typedef ErrorBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CODE = 4,
    VT_MESSAGE = 6,
    VT_ERRORS = 8
  };
  int64_t code() const {
    return GetField<int64_t>(VT_CODE, 0);
  }
  const flatbuffers::String *message() const {
    return GetPointer<const flatbuffers::String *>(VT_MESSAGE);
  }
  const flatbuffers::Vector<flatbuffers::Offset<firebase::auth::fbs::ErrorDetails>> *errors() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<firebase::auth::fbs::ErrorDetails>> *>(VT_ERRORS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_CODE) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.VerifyString(message()) &&
           VerifyOffset(verifier, VT_ERRORS) &&
           verifier.VerifyVector(errors()) &&
           verifier.VerifyVectorOfTables(errors()) &&
           verifier.EndTable();
  }
  ErrorT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ErrorT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Error> Pack(flatbuffers::FlatBufferBuilder &_fbb, const ErrorT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ErrorBuilder {
  typedef Error Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_code(int64_t code) {
    fbb_.AddElement<int64_t>(Error::VT_CODE, code, 0);
  }
  void add_message(flatbuffers::Offset<flatbuffers::String> message) {
    fbb_.AddOffset(Error::VT_MESSAGE, message);
  }
  void add_errors(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<firebase::auth::fbs::ErrorDetails>>> errors) {
    fbb_.AddOffset(Error::VT_ERRORS, errors);
  }
  explicit ErrorBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Error> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Error>(end);
    return o;
  }
};

inline flatbuffers::Offset<Error> CreateError(
    flatbuffers::FlatBufferBuilder &_fbb,
    int64_t code = 0,
    flatbuffers::Offset<flatbuffers::String> message = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<firebase::auth::fbs::ErrorDetails>>> errors = 0) {
  ErrorBuilder builder_(_fbb);
  builder_.add_code(code);
  builder_.add_errors(errors);
  builder_.add_message(message);
  return builder_.Finish();
}

inline flatbuffers::Offset<Error> CreateErrorDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int64_t code = 0,
    const char *message = nullptr,
    const std::vector<flatbuffers::Offset<firebase::auth::fbs::ErrorDetails>> *errors = nullptr) {
  auto message__ = message ? _fbb.CreateString(message) : 0;
  auto errors__ = errors ? _fbb.CreateVector<flatbuffers::Offset<firebase::auth::fbs::ErrorDetails>>(*errors) : 0;
  return firebase::auth::fbs::CreateError(
      _fbb,
      code,
      message__,
      errors__);
}

flatbuffers::Offset<Error> CreateError(flatbuffers::FlatBufferBuilder &_fbb, const ErrorT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct ResponseT : public flatbuffers::NativeTable {
  typedef Response TableType;
  std::string kind;
  std::string idToken;
  std::string refreshToken;
  std::string expiresIn;
  std::string localId;
  std::vector<std::string> allProviders;
  bool registered;
  std::vector<flatbuffers::unique_ptr<firebase::auth::fbs::UserT>> users;
  std::string receipt;
  std::string displayName;
  std::string email;
  std::string photoUrl;
  std::string access_token;
  std::string refresh_token;
  std::string id_token;
  std::string expires_in;
  bool isNewUser;
  std::string passwordHash;
  std::string providerId;
  std::string rawUserInfo;
  std::vector<flatbuffers::unique_ptr<firebase::auth::fbs::ProviderUserInfoT>> providerUserInfo;
  bool needConfirmation;
  flatbuffers::unique_ptr<firebase::auth::fbs::ErrorT> error;
  ResponseT()
      : registered(false),
        isNewUser(false),
        needConfirmation(false) {
  }
};

struct Response FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ResponseT NativeTableType;
  typedef ResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_KIND = 4,
    VT_IDTOKEN = 6,
    VT_REFRESHTOKEN = 8,
    VT_EXPIRESIN = 10,
    VT_LOCALID = 12,
    VT_ALLPROVIDERS = 14,
    VT_REGISTERED = 16,
    VT_USERS = 18,
    VT_RECEIPT = 20,
    VT_DISPLAYNAME = 22,
    VT_EMAIL = 24,
    VT_PHOTOURL = 26,
    VT_ACCESS_TOKEN = 28,
    VT_REFRESH_TOKEN = 30,
    VT_ID_TOKEN = 32,
    VT_EXPIRES_IN = 34,
    VT_ISNEWUSER = 36,
    VT_PASSWORDHASH = 38,
    VT_PROVIDERID = 40,
    VT_RAWUSERINFO = 42,
    VT_PROVIDERUSERINFO = 44,
    VT_NEEDCONFIRMATION = 46,
    VT_ERROR = 48
  };
  const flatbuffers::String *kind() const {
    return GetPointer<const flatbuffers::String *>(VT_KIND);
  }
  const flatbuffers::String *idToken() const {
    return GetPointer<const flatbuffers::String *>(VT_IDTOKEN);
  }
  const flatbuffers::String *refreshToken() const {
    return GetPointer<const flatbuffers::String *>(VT_REFRESHTOKEN);
  }
  const flatbuffers::String *expiresIn() const {
    return GetPointer<const flatbuffers::String *>(VT_EXPIRESIN);
  }
  const flatbuffers::String *localId() const {
    return GetPointer<const flatbuffers::String *>(VT_LOCALID);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *allProviders() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_ALLPROVIDERS);
  }
  bool registered() const {
    return GetField<uint8_t>(VT_REGISTERED, 0) != 0;
  }
  const flatbuffers::Vector<flatbuffers::Offset<firebase::auth::fbs::User>> *users() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<firebase::auth::fbs::User>> *>(VT_USERS);
  }
  const flatbuffers::String *receipt() const {
    return GetPointer<const flatbuffers::String *>(VT_RECEIPT);
  }
  const flatbuffers::String *displayName() const {
    return GetPointer<const flatbuffers::String *>(VT_DISPLAYNAME);
  }
  const flatbuffers::String *email() const {
    return GetPointer<const flatbuffers::String *>(VT_EMAIL);
  }
  const flatbuffers::String *photoUrl() const {
    return GetPointer<const flatbuffers::String *>(VT_PHOTOURL);
  }
  const flatbuffers::String *access_token() const {
    return GetPointer<const flatbuffers::String *>(VT_ACCESS_TOKEN);
  }
  const flatbuffers::String *refresh_token() const {
    return GetPointer<const flatbuffers::String *>(VT_REFRESH_TOKEN);
  }
  const flatbuffers::String *id_token() const {
    return GetPointer<const flatbuffers::String *>(VT_ID_TOKEN);
  }
  const flatbuffers::String *expires_in() const {
    return GetPointer<const flatbuffers::String *>(VT_EXPIRES_IN);
  }
  bool isNewUser() const {
    return GetField<uint8_t>(VT_ISNEWUSER, 0) != 0;
  }
  const flatbuffers::String *passwordHash() const {
    return GetPointer<const flatbuffers::String *>(VT_PASSWORDHASH);
  }
  const flatbuffers::String *providerId() const {
    return GetPointer<const flatbuffers::String *>(VT_PROVIDERID);
  }
  const flatbuffers::String *rawUserInfo() const {
    return GetPointer<const flatbuffers::String *>(VT_RAWUSERINFO);
  }
  const flatbuffers::Vector<flatbuffers::Offset<firebase::auth::fbs::ProviderUserInfo>> *providerUserInfo() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<firebase::auth::fbs::ProviderUserInfo>> *>(VT_PROVIDERUSERINFO);
  }
  bool needConfirmation() const {
    return GetField<uint8_t>(VT_NEEDCONFIRMATION, 0) != 0;
  }
  const firebase::auth::fbs::Error *error() const {
    return GetPointer<const firebase::auth::fbs::Error *>(VT_ERROR);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_KIND) &&
           verifier.VerifyString(kind()) &&
           VerifyOffset(verifier, VT_IDTOKEN) &&
           verifier.VerifyString(idToken()) &&
           VerifyOffset(verifier, VT_REFRESHTOKEN) &&
           verifier.VerifyString(refreshToken()) &&
           VerifyOffset(verifier, VT_EXPIRESIN) &&
           verifier.VerifyString(expiresIn()) &&
           VerifyOffset(verifier, VT_LOCALID) &&
           verifier.VerifyString(localId()) &&
           VerifyOffset(verifier, VT_ALLPROVIDERS) &&
           verifier.VerifyVector(allProviders()) &&
           verifier.VerifyVectorOfStrings(allProviders()) &&
           VerifyField<uint8_t>(verifier, VT_REGISTERED) &&
           VerifyOffset(verifier, VT_USERS) &&
           verifier.VerifyVector(users()) &&
           verifier.VerifyVectorOfTables(users()) &&
           VerifyOffset(verifier, VT_RECEIPT) &&
           verifier.VerifyString(receipt()) &&
           VerifyOffset(verifier, VT_DISPLAYNAME) &&
           verifier.VerifyString(displayName()) &&
           VerifyOffset(verifier, VT_EMAIL) &&
           verifier.VerifyString(email()) &&
           VerifyOffset(verifier, VT_PHOTOURL) &&
           verifier.VerifyString(photoUrl()) &&
           VerifyOffset(verifier, VT_ACCESS_TOKEN) &&
           verifier.VerifyString(access_token()) &&
           VerifyOffset(verifier, VT_REFRESH_TOKEN) &&
           verifier.VerifyString(refresh_token()) &&
           VerifyOffset(verifier, VT_ID_TOKEN) &&
           verifier.VerifyString(id_token()) &&
           VerifyOffset(verifier, VT_EXPIRES_IN) &&
           verifier.VerifyString(expires_in()) &&
           VerifyField<uint8_t>(verifier, VT_ISNEWUSER) &&
           VerifyOffset(verifier, VT_PASSWORDHASH) &&
           verifier.VerifyString(passwordHash()) &&
           VerifyOffset(verifier, VT_PROVIDERID) &&
           verifier.VerifyString(providerId()) &&
           VerifyOffset(verifier, VT_RAWUSERINFO) &&
           verifier.VerifyString(rawUserInfo()) &&
           VerifyOffset(verifier, VT_PROVIDERUSERINFO) &&
           verifier.VerifyVector(providerUserInfo()) &&
           verifier.VerifyVectorOfTables(providerUserInfo()) &&
           VerifyField<uint8_t>(verifier, VT_NEEDCONFIRMATION) &&
           VerifyOffset(verifier, VT_ERROR) &&
           verifier.VerifyTable(error()) &&
           verifier.EndTable();
  }
  ResponseT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ResponseT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Response> Pack(flatbuffers::FlatBufferBuilder &_fbb, const ResponseT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ResponseBuilder {
  typedef Response Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_kind(flatbuffers::Offset<flatbuffers::String> kind) {
    fbb_.AddOffset(Response::VT_KIND, kind);
  }
  void add_idToken(flatbuffers::Offset<flatbuffers::String> idToken) {
    fbb_.AddOffset(Response::VT_IDTOKEN, idToken);
  }
  void add_refreshToken(flatbuffers::Offset<flatbuffers::String> refreshToken) {
    fbb_.AddOffset(Response::VT_REFRESHTOKEN, refreshToken);
  }
  void add_expiresIn(flatbuffers::Offset<flatbuffers::String> expiresIn) {
    fbb_.AddOffset(Response::VT_EXPIRESIN, expiresIn);
  }
  void add_localId(flatbuffers::Offset<flatbuffers::String> localId) {
    fbb_.AddOffset(Response::VT_LOCALID, localId);
  }
  void add_allProviders(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> allProviders) {
    fbb_.AddOffset(Response::VT_ALLPROVIDERS, allProviders);
  }
  void add_registered(bool registered) {
    fbb_.AddElement<uint8_t>(Response::VT_REGISTERED, static_cast<uint8_t>(registered), 0);
  }
  void add_users(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<firebase::auth::fbs::User>>> users) {
    fbb_.AddOffset(Response::VT_USERS, users);
  }
  void add_receipt(flatbuffers::Offset<flatbuffers::String> receipt) {
    fbb_.AddOffset(Response::VT_RECEIPT, receipt);
  }
  void add_displayName(flatbuffers::Offset<flatbuffers::String> displayName) {
    fbb_.AddOffset(Response::VT_DISPLAYNAME, displayName);
  }
  void add_email(flatbuffers::Offset<flatbuffers::String> email) {
    fbb_.AddOffset(Response::VT_EMAIL, email);
  }
  void add_photoUrl(flatbuffers::Offset<flatbuffers::String> photoUrl) {
    fbb_.AddOffset(Response::VT_PHOTOURL, photoUrl);
  }
  void add_access_token(flatbuffers::Offset<flatbuffers::String> access_token) {
    fbb_.AddOffset(Response::VT_ACCESS_TOKEN, access_token);
  }
  void add_refresh_token(flatbuffers::Offset<flatbuffers::String> refresh_token) {
    fbb_.AddOffset(Response::VT_REFRESH_TOKEN, refresh_token);
  }
  void add_id_token(flatbuffers::Offset<flatbuffers::String> id_token) {
    fbb_.AddOffset(Response::VT_ID_TOKEN, id_token);
  }
  void add_expires_in(flatbuffers::Offset<flatbuffers::String> expires_in) {
    fbb_.AddOffset(Response::VT_EXPIRES_IN, expires_in);
  }
  void add_isNewUser(bool isNewUser) {
    fbb_.AddElement<uint8_t>(Response::VT_ISNEWUSER, static_cast<uint8_t>(isNewUser), 0);
  }
  void add_passwordHash(flatbuffers::Offset<flatbuffers::String> passwordHash) {
    fbb_.AddOffset(Response::VT_PASSWORDHASH, passwordHash);
  }
  void add_providerId(flatbuffers::Offset<flatbuffers::String> providerId) {
    fbb_.AddOffset(Response::VT_PROVIDERID, providerId);
  }
  void add_rawUserInfo(flatbuffers::Offset<flatbuffers::String> rawUserInfo) {
    fbb_.AddOffset(Response::VT_RAWUSERINFO, rawUserInfo);
  }
  void add_providerUserInfo(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<firebase::auth::fbs::ProviderUserInfo>>> providerUserInfo) {
    fbb_.AddOffset(Response::VT_PROVIDERUSERINFO, providerUserInfo);
  }
  void add_needConfirmation(bool needConfirmation) {
    fbb_.AddElement<uint8_t>(Response::VT_NEEDCONFIRMATION, static_cast<uint8_t>(needConfirmation), 0);
  }
  void add_error(flatbuffers::Offset<firebase::auth::fbs::Error> error) {
    fbb_.AddOffset(Response::VT_ERROR, error);
  }
  explicit ResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Response> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Response>(end);
    return o;
  }
};

inline flatbuffers::Offset<Response> CreateResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> kind = 0,
    flatbuffers::Offset<flatbuffers::String> idToken = 0,
    flatbuffers::Offset<flatbuffers::String> refreshToken = 0,
    flatbuffers::Offset<flatbuffers::String> expiresIn = 0,
    flatbuffers::Offset<flatbuffers::String> localId = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> allProviders = 0,
    bool registered = false,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<firebase::auth::fbs::User>>> users = 0,
    flatbuffers::Offset<flatbuffers::String> receipt = 0,
    flatbuffers::Offset<flatbuffers::String> displayName = 0,
    flatbuffers::Offset<flatbuffers::String> email = 0,
    flatbuffers::Offset<flatbuffers::String> photoUrl = 0,
    flatbuffers::Offset<flatbuffers::String> access_token = 0,
    flatbuffers::Offset<flatbuffers::String> refresh_token = 0,
    flatbuffers::Offset<flatbuffers::String> id_token = 0,
    flatbuffers::Offset<flatbuffers::String> expires_in = 0,
    bool isNewUser = false,
    flatbuffers::Offset<flatbuffers::String> passwordHash = 0,
    flatbuffers::Offset<flatbuffers::String> providerId = 0,
    flatbuffers::Offset<flatbuffers::String> rawUserInfo = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<firebase::auth::fbs::ProviderUserInfo>>> providerUserInfo = 0,
    bool needConfirmation = false,
    flatbuffers::Offset<firebase::auth::fbs::Error> error = 0) {
  ResponseBuilder builder_(_fbb);
  builder_.add_error(error);
  builder_.add_providerUserInfo(providerUserInfo);
  builder_.add_rawUserInfo(rawUserInfo);
  builder_.add_providerId(providerId);
  builder_.add_passwordHash(passwordHash);
  builder_.add_expires_in(expires_in);
  builder_.add_id_token(id_token);
  builder_.add_refresh_token(refresh_token);
  builder_.add_access_token(access_token);
  builder_.add_photoUrl(photoUrl);
  builder_.add_email(email);
  builder_.add_displayName(displayName);
  builder_.add_receipt(receipt);
  builder_.add_users(users);
  builder_.add_allProviders(allProviders);
  builder_.add_localId(localId);
  builder_.add_expiresIn(expiresIn);
  builder_.add_refreshToken(refreshToken);
  builder_.add_idToken(idToken);
  builder_.add_kind(kind);
  builder_.add_needConfirmation(needConfirmation);
  builder_.add_isNewUser(isNewUser);
  builder_.add_registered(registered);
  return builder_.Finish();
}

inline flatbuffers::Offset<Response> CreateResponseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *kind = nullptr,
    const char *idToken = nullptr,
    const char *refreshToken = nullptr,
    const char *expiresIn = nullptr,
    const char *localId = nullptr,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *allProviders = nullptr,
    bool registered = false,
    const std::vector<flatbuffers::Offset<firebase::auth::fbs::User>> *users = nullptr,
    const char *receipt = nullptr,
    const char *displayName = nullptr,
    const char *email = nullptr,
    const char *photoUrl = nullptr,
    const char *access_token = nullptr,
    const char *refresh_token = nullptr,
    const char *id_token = nullptr,
    const char *expires_in = nullptr,
    bool isNewUser = false,
    const char *passwordHash = nullptr,
    const char *providerId = nullptr,
    const char *rawUserInfo = nullptr,
    const std::vector<flatbuffers::Offset<firebase::auth::fbs::ProviderUserInfo>> *providerUserInfo = nullptr,
    bool needConfirmation = false,
    flatbuffers::Offset<firebase::auth::fbs::Error> error = 0) {
  auto kind__ = kind ? _fbb.CreateString(kind) : 0;
  auto idToken__ = idToken ? _fbb.CreateString(idToken) : 0;
  auto refreshToken__ = refreshToken ? _fbb.CreateString(refreshToken) : 0;
  auto expiresIn__ = expiresIn ? _fbb.CreateString(expiresIn) : 0;
  auto localId__ = localId ? _fbb.CreateString(localId) : 0;
  auto allProviders__ = allProviders ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*allProviders) : 0;
  auto users__ = users ? _fbb.CreateVector<flatbuffers::Offset<firebase::auth::fbs::User>>(*users) : 0;
  auto receipt__ = receipt ? _fbb.CreateString(receipt) : 0;
  auto displayName__ = displayName ? _fbb.CreateString(displayName) : 0;
  auto email__ = email ? _fbb.CreateString(email) : 0;
  auto photoUrl__ = photoUrl ? _fbb.CreateString(photoUrl) : 0;
  auto access_token__ = access_token ? _fbb.CreateString(access_token) : 0;
  auto refresh_token__ = refresh_token ? _fbb.CreateString(refresh_token) : 0;
  auto id_token__ = id_token ? _fbb.CreateString(id_token) : 0;
  auto expires_in__ = expires_in ? _fbb.CreateString(expires_in) : 0;
  auto passwordHash__ = passwordHash ? _fbb.CreateString(passwordHash) : 0;
  auto providerId__ = providerId ? _fbb.CreateString(providerId) : 0;
  auto rawUserInfo__ = rawUserInfo ? _fbb.CreateString(rawUserInfo) : 0;
  auto providerUserInfo__ = providerUserInfo ? _fbb.CreateVector<flatbuffers::Offset<firebase::auth::fbs::ProviderUserInfo>>(*providerUserInfo) : 0;
  return firebase::auth::fbs::CreateResponse(
      _fbb,
      kind__,
      idToken__,
      refreshToken__,
      expiresIn__,
      localId__,
      allProviders__,
      registered,
      users__,
      receipt__,
      displayName__,
      email__,
      photoUrl__,
      access_token__,
      refresh_token__,
      id_token__,
      expires_in__,
      isNewUser,
      passwordHash__,
      providerId__,
      rawUserInfo__,
      providerUserInfo__,
      needConfirmation,
      error);
}

flatbuffers::Offset<Response> CreateResponse(flatbuffers::FlatBufferBuilder &_fbb, const ResponseT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline ProviderUserInfoT *ProviderUserInfo::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  flatbuffers::unique_ptr<firebase::auth::fbs::ProviderUserInfoT> _o = flatbuffers::unique_ptr<firebase::auth::fbs::ProviderUserInfoT>(new ProviderUserInfoT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void ProviderUserInfo::UnPackTo(ProviderUserInfoT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = providerId(); if (_e) _o->providerId = _e->str(); }
  { auto _e = displayName(); if (_e) _o->displayName = _e->str(); }
  { auto _e = photoUrl(); if (_e) _o->photoUrl = _e->str(); }
  { auto _e = federatedId(); if (_e) _o->federatedId = _e->str(); }
  { auto _e = email(); if (_e) _o->email = _e->str(); }
  { auto _e = phoneNumber(); if (_e) _o->phoneNumber = _e->str(); }
}

inline flatbuffers::Offset<ProviderUserInfo> ProviderUserInfo::Pack(flatbuffers::FlatBufferBuilder &_fbb, const ProviderUserInfoT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateProviderUserInfo(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<ProviderUserInfo> CreateProviderUserInfo(flatbuffers::FlatBufferBuilder &_fbb, const ProviderUserInfoT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const ProviderUserInfoT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _providerId = _o->providerId.empty() ? 0 : _fbb.CreateString(_o->providerId);
  auto _displayName = _o->displayName.empty() ? 0 : _fbb.CreateString(_o->displayName);
  auto _photoUrl = _o->photoUrl.empty() ? 0 : _fbb.CreateString(_o->photoUrl);
  auto _federatedId = _o->federatedId.empty() ? 0 : _fbb.CreateString(_o->federatedId);
  auto _email = _o->email.empty() ? 0 : _fbb.CreateString(_o->email);
  auto _phoneNumber = _o->phoneNumber.empty() ? 0 : _fbb.CreateString(_o->phoneNumber);
  return firebase::auth::fbs::CreateProviderUserInfo(
      _fbb,
      _providerId,
      _displayName,
      _photoUrl,
      _federatedId,
      _email,
      _phoneNumber);
}

inline UserT *User::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  flatbuffers::unique_ptr<firebase::auth::fbs::UserT> _o = flatbuffers::unique_ptr<firebase::auth::fbs::UserT>(new UserT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void User::UnPackTo(UserT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = localId(); if (_e) _o->localId = _e->str(); }
  { auto _e = displayName(); if (_e) _o->displayName = _e->str(); }
  { auto _e = email(); if (_e) _o->email = _e->str(); }
  { auto _e = photoUrl(); if (_e) _o->photoUrl = _e->str(); }
  { auto _e = emailVerified(); _o->emailVerified = _e; }
  { auto _e = passwordHash(); if (_e) _o->passwordHash = _e->str(); }
  { auto _e = phoneNumber(); if (_e) _o->phoneNumber = _e->str(); }
  { auto _e = passwordUpdatedAt(); _o->passwordUpdatedAt = _e; }
  { auto _e = validSince(); _o->validSince = _e; }
  { auto _e = lastLoginAt(); _o->lastLoginAt = _e; }
  { auto _e = createdAt(); _o->createdAt = _e; }
  { auto _e = providerUserInfo(); if (_e) { _o->providerUserInfo.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->providerUserInfo[_i] = flatbuffers::unique_ptr<firebase::auth::fbs::ProviderUserInfoT>(_e->Get(_i)->UnPack(_resolver)); } } }
}

inline flatbuffers::Offset<User> User::Pack(flatbuffers::FlatBufferBuilder &_fbb, const UserT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateUser(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<User> CreateUser(flatbuffers::FlatBufferBuilder &_fbb, const UserT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const UserT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _localId = _o->localId.empty() ? 0 : _fbb.CreateString(_o->localId);
  auto _displayName = _o->displayName.empty() ? 0 : _fbb.CreateString(_o->displayName);
  auto _email = _o->email.empty() ? 0 : _fbb.CreateString(_o->email);
  auto _photoUrl = _o->photoUrl.empty() ? 0 : _fbb.CreateString(_o->photoUrl);
  auto _emailVerified = _o->emailVerified;
  auto _passwordHash = _o->passwordHash.empty() ? 0 : _fbb.CreateString(_o->passwordHash);
  auto _phoneNumber = _o->phoneNumber.empty() ? 0 : _fbb.CreateString(_o->phoneNumber);
  auto _passwordUpdatedAt = _o->passwordUpdatedAt;
  auto _validSince = _o->validSince;
  auto _lastLoginAt = _o->lastLoginAt;
  auto _createdAt = _o->createdAt;
  auto _providerUserInfo = _o->providerUserInfo.size() ? _fbb.CreateVector<flatbuffers::Offset<firebase::auth::fbs::ProviderUserInfo>> (_o->providerUserInfo.size(), [](size_t i, _VectorArgs *__va) { return CreateProviderUserInfo(*__va->__fbb, __va->__o->providerUserInfo[i].get(), __va->__rehasher); }, &_va ) : 0;
  return firebase::auth::fbs::CreateUser(
      _fbb,
      _localId,
      _displayName,
      _email,
      _photoUrl,
      _emailVerified,
      _passwordHash,
      _phoneNumber,
      _passwordUpdatedAt,
      _validSince,
      _lastLoginAt,
      _createdAt,
      _providerUserInfo);
}

inline ErrorDetailsT *ErrorDetails::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  flatbuffers::unique_ptr<firebase::auth::fbs::ErrorDetailsT> _o = flatbuffers::unique_ptr<firebase::auth::fbs::ErrorDetailsT>(new ErrorDetailsT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void ErrorDetails::UnPackTo(ErrorDetailsT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = reason(); if (_e) _o->reason = _e->str(); }
}

inline flatbuffers::Offset<ErrorDetails> ErrorDetails::Pack(flatbuffers::FlatBufferBuilder &_fbb, const ErrorDetailsT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateErrorDetails(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<ErrorDetails> CreateErrorDetails(flatbuffers::FlatBufferBuilder &_fbb, const ErrorDetailsT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const ErrorDetailsT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _reason = _o->reason.empty() ? 0 : _fbb.CreateString(_o->reason);
  return firebase::auth::fbs::CreateErrorDetails(
      _fbb,
      _reason);
}

inline ErrorT *Error::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  flatbuffers::unique_ptr<firebase::auth::fbs::ErrorT> _o = flatbuffers::unique_ptr<firebase::auth::fbs::ErrorT>(new ErrorT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Error::UnPackTo(ErrorT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = code(); _o->code = _e; }
  { auto _e = message(); if (_e) _o->message = _e->str(); }
  { auto _e = errors(); if (_e) { _o->errors.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->errors[_i] = flatbuffers::unique_ptr<firebase::auth::fbs::ErrorDetailsT>(_e->Get(_i)->UnPack(_resolver)); } } }
}

inline flatbuffers::Offset<Error> Error::Pack(flatbuffers::FlatBufferBuilder &_fbb, const ErrorT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateError(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Error> CreateError(flatbuffers::FlatBufferBuilder &_fbb, const ErrorT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const ErrorT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _code = _o->code;
  auto _message = _o->message.empty() ? 0 : _fbb.CreateString(_o->message);
  auto _errors = _o->errors.size() ? _fbb.CreateVector<flatbuffers::Offset<firebase::auth::fbs::ErrorDetails>> (_o->errors.size(), [](size_t i, _VectorArgs *__va) { return CreateErrorDetails(*__va->__fbb, __va->__o->errors[i].get(), __va->__rehasher); }, &_va ) : 0;
  return firebase::auth::fbs::CreateError(
      _fbb,
      _code,
      _message,
      _errors);
}

inline ResponseT *Response::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  flatbuffers::unique_ptr<firebase::auth::fbs::ResponseT> _o = flatbuffers::unique_ptr<firebase::auth::fbs::ResponseT>(new ResponseT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Response::UnPackTo(ResponseT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = kind(); if (_e) _o->kind = _e->str(); }
  { auto _e = idToken(); if (_e) _o->idToken = _e->str(); }
  { auto _e = refreshToken(); if (_e) _o->refreshToken = _e->str(); }
  { auto _e = expiresIn(); if (_e) _o->expiresIn = _e->str(); }
  { auto _e = localId(); if (_e) _o->localId = _e->str(); }
  { auto _e = allProviders(); if (_e) { _o->allProviders.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->allProviders[_i] = _e->Get(_i)->str(); } } }
  { auto _e = registered(); _o->registered = _e; }
  { auto _e = users(); if (_e) { _o->users.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->users[_i] = flatbuffers::unique_ptr<firebase::auth::fbs::UserT>(_e->Get(_i)->UnPack(_resolver)); } } }
  { auto _e = receipt(); if (_e) _o->receipt = _e->str(); }
  { auto _e = displayName(); if (_e) _o->displayName = _e->str(); }
  { auto _e = email(); if (_e) _o->email = _e->str(); }
  { auto _e = photoUrl(); if (_e) _o->photoUrl = _e->str(); }
  { auto _e = access_token(); if (_e) _o->access_token = _e->str(); }
  { auto _e = refresh_token(); if (_e) _o->refresh_token = _e->str(); }
  { auto _e = id_token(); if (_e) _o->id_token = _e->str(); }
  { auto _e = expires_in(); if (_e) _o->expires_in = _e->str(); }
  { auto _e = isNewUser(); _o->isNewUser = _e; }
  { auto _e = passwordHash(); if (_e) _o->passwordHash = _e->str(); }
  { auto _e = providerId(); if (_e) _o->providerId = _e->str(); }
  { auto _e = rawUserInfo(); if (_e) _o->rawUserInfo = _e->str(); }
  { auto _e = providerUserInfo(); if (_e) { _o->providerUserInfo.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->providerUserInfo[_i] = flatbuffers::unique_ptr<firebase::auth::fbs::ProviderUserInfoT>(_e->Get(_i)->UnPack(_resolver)); } } }
  { auto _e = needConfirmation(); _o->needConfirmation = _e; }
  { auto _e = error(); if (_e) _o->error = flatbuffers::unique_ptr<firebase::auth::fbs::ErrorT>(_e->UnPack(_resolver)); }
}

inline flatbuffers::Offset<Response> Response::Pack(flatbuffers::FlatBufferBuilder &_fbb, const ResponseT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateResponse(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Response> CreateResponse(flatbuffers::FlatBufferBuilder &_fbb, const ResponseT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const ResponseT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _kind = _o->kind.empty() ? 0 : _fbb.CreateString(_o->kind);
  auto _idToken = _o->idToken.empty() ? 0 : _fbb.CreateString(_o->idToken);
  auto _refreshToken = _o->refreshToken.empty() ? 0 : _fbb.CreateString(_o->refreshToken);
  auto _expiresIn = _o->expiresIn.empty() ? 0 : _fbb.CreateString(_o->expiresIn);
  auto _localId = _o->localId.empty() ? 0 : _fbb.CreateString(_o->localId);
  auto _allProviders = _o->allProviders.size() ? _fbb.CreateVectorOfStrings(_o->allProviders) : 0;
  auto _registered = _o->registered;
  auto _users = _o->users.size() ? _fbb.CreateVector<flatbuffers::Offset<firebase::auth::fbs::User>> (_o->users.size(), [](size_t i, _VectorArgs *__va) { return CreateUser(*__va->__fbb, __va->__o->users[i].get(), __va->__rehasher); }, &_va ) : 0;
  auto _receipt = _o->receipt.empty() ? 0 : _fbb.CreateString(_o->receipt);
  auto _displayName = _o->displayName.empty() ? 0 : _fbb.CreateString(_o->displayName);
  auto _email = _o->email.empty() ? 0 : _fbb.CreateString(_o->email);
  auto _photoUrl = _o->photoUrl.empty() ? 0 : _fbb.CreateString(_o->photoUrl);
  auto _access_token = _o->access_token.empty() ? 0 : _fbb.CreateString(_o->access_token);
  auto _refresh_token = _o->refresh_token.empty() ? 0 : _fbb.CreateString(_o->refresh_token);
  auto _id_token = _o->id_token.empty() ? 0 : _fbb.CreateString(_o->id_token);
  auto _expires_in = _o->expires_in.empty() ? 0 : _fbb.CreateString(_o->expires_in);
  auto _isNewUser = _o->isNewUser;
  auto _passwordHash = _o->passwordHash.empty() ? 0 : _fbb.CreateString(_o->passwordHash);
  auto _providerId = _o->providerId.empty() ? 0 : _fbb.CreateString(_o->providerId);
  auto _rawUserInfo = _o->rawUserInfo.empty() ? 0 : _fbb.CreateString(_o->rawUserInfo);
  auto _providerUserInfo = _o->providerUserInfo.size() ? _fbb.CreateVector<flatbuffers::Offset<firebase::auth::fbs::ProviderUserInfo>> (_o->providerUserInfo.size(), [](size_t i, _VectorArgs *__va) { return CreateProviderUserInfo(*__va->__fbb, __va->__o->providerUserInfo[i].get(), __va->__rehasher); }, &_va ) : 0;
  auto _needConfirmation = _o->needConfirmation;
  auto _error = _o->error ? CreateError(_fbb, _o->error.get(), _rehasher) : 0;
  return firebase::auth::fbs::CreateResponse(
      _fbb,
      _kind,
      _idToken,
      _refreshToken,
      _expiresIn,
      _localId,
      _allProviders,
      _registered,
      _users,
      _receipt,
      _displayName,
      _email,
      _photoUrl,
      _access_token,
      _refresh_token,
      _id_token,
      _expires_in,
      _isNewUser,
      _passwordHash,
      _providerId,
      _rawUserInfo,
      _providerUserInfo,
      _needConfirmation,
      _error);
}

inline const firebase::auth::fbs::Response *GetResponse(const void *buf) {
  return flatbuffers::GetRoot<firebase::auth::fbs::Response>(buf);
}

inline const firebase::auth::fbs::Response *GetSizePrefixedResponse(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<firebase::auth::fbs::Response>(buf);
}

inline bool VerifyResponseBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<firebase::auth::fbs::Response>(nullptr);
}

inline bool VerifySizePrefixedResponseBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<firebase::auth::fbs::Response>(nullptr);
}

inline void FinishResponseBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<firebase::auth::fbs::Response> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedResponseBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<firebase::auth::fbs::Response> root) {
  fbb.FinishSizePrefixed(root);
}

inline flatbuffers::unique_ptr<firebase::auth::fbs::ResponseT> UnPackResponse(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return flatbuffers::unique_ptr<firebase::auth::fbs::ResponseT>(GetResponse(buf)->UnPack(res));
}

inline flatbuffers::unique_ptr<firebase::auth::fbs::ResponseT> UnPackSizePrefixedResponse(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return flatbuffers::unique_ptr<firebase::auth::fbs::ResponseT>(GetSizePrefixedResponse(buf)->UnPack(res));
}

}  // namespace fbs
}  // namespace auth
}  // namespace firebase

#endif  // FLATBUFFERS_GENERATED_RESPONSE_FIREBASE_AUTH_FBS_H_
